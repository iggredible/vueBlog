{"best-way-to-navigate-files-in-vim-4g09":{"type_of":"article","id":192282,"title":"Best Way to Navigate Files in Vim","description":"Best way to navigate files in vim","cover_image":null,"published":true,"published_at":"2019-10-25T12:50:32.245Z","tag_list":["vim","neovim","navigation","files"],"slug":"best-way-to-navigate-files-in-vim-4g09","path":"/iggredible/best-way-to-navigate-files-in-vim-4g09","url":"https://dev.to/iggredible/best-way-to-navigate-files-in-vim-4g09","canonical_url":"https://dev.to/iggredible/best-way-to-navigate-files-in-vim-4g09","comments_count":2,"positive_reactions_count":12,"page_views_count":152,"published_timestamp":"2019-10-25T12:50:32Z","body_markdown":"---\ntitle: Best Way to Navigate Files in Vim\npublished: true\ndescription: Best way to navigate files in vim\ntags: vim, neovim, navigation, files\n---\n\nOne of my Vim productivity bottleneck is navigating between files. While Vim provides cool ways to [move around in a file](https://dev.to/iggredible/vim-cheatsheet-to-move-around-in-a-file-plus-tips-to-use-them-bme), I feel like my file navigation in Vim is slower than when using popular editors like Atom, VSCode, Sublime, or IntelliJ.\n\nThis blog is an opinionated breakdown how I overcome that shortcoming.\n \n# Why most people are slow at navigating files using Vim\n\nI think most people (myself included) that are coming from popular editors have the wrong approach. What I have been trying to do is making Vim do what I want, but never tried to learn how Vim does it.  \n\n# Vim's way: Buffer\n\nI believe buffer is Vim's way to navigate quickly between files. If you don't know what buffers are, think of it as a list of all your \"opened\" files. \n\nBefore we start, I recommend to have `:set hidden`. This allows you to \"hide\" buffers when you are going in and out.\n\nBelow are some buffer tips I found very useful:\n\n# Buffer: Previous, Next, First, Last\n\nYou can go to next/previous and first/last buffers with `bprev`, `bnext`, `bfirst`, and `blast`. Here are my mappings:\n\n```\nnnoremap <Leader>h :bprevious<CR>\nnnoremap <Leader>l :bnext<CR>\nnnoremap <Leader>k :bfirst<CR>\nnnoremap <Leader>j :blast<CR>\n```\n\n# Buffer: Flying with buffer list\n\nThis - in my opinion - is the killer feature of Vim for fast navigation method: [flying](https://www.deviantart.com/bairuidahu/art/Flying-vs-Cycling-261641977). It is done by using buffer list (`:ls` or `:buffers`) to display all opened files. From here, you can access **any** files within very few keystrokes. \n\nI used this so much I have mine mapped to `<Ctrl-b>`.\n\n```\nnnoremap <C-b> :ls<CR>:b<Space>\n```\n\nWhile you are *on* buffer list (`:ls`/ `:buffers`), there are multiple ways to go to a file after typing `:b<space>`:\n\n- You can type the buffer number.\n- You can type the partial file name and auto-complete with tab.\n- You can start pressing tabs to traverse buffer list until you find the file you want to go to.\n- You can go to previous buffer with `#`. This lets you to toggle back and forth previous file. There is even a *native* vim shortcut for it: `<Ctrl-^>`\n\nStop for a moment and try to internalize this - when working on a task, there are usually Y amount of files needed. Once you have them \"touched\"/ \"opened\" (once you have them inside your buffer list), you generally don't need anything new (*even* if you do, you can use fzf - covered below). What you need now is a quick way to fly between those Y files. This is where the mapping comes - all your relevant files are accessible within 2-3 key presses.\n\nHow cool is that? 😎\n\nI also wanted to add that `<Ctrl-o>` and `<Ctrl-i>` are indispensable shortcut to jump back to previous and next files.\n\n# Complementing Buffer flow with fzf\n\nAlthough some vim purists might prefer `:e` or `:find`, I find [fzf](https://github.com/junegunn/fzf.vim) combined with [ripgrep](https://github.com/BurntSushi/ripgrep) indispensable. Here are my mappings:\n\n```\nnnoremap <C-p> :Files<CR>\nnnoremap <C-f> :Rg<CR>\n```\n\nWith these two I can fuzzy-find filename with `<Ctrl-p>` and fuzzy-find string in project with `<Ctrl-f>`.\n\nI usually use these to quickly open files I haven't opened yet. Once they are opened, I use flying technique to go around.\n\n\n# Using tags\n\nThere are times when I need to jump to an import/export file while editing a file. The easiest way is to jump to definition with `C-]`. I use [vim-gutentags](https://github.com/ludovicchabant/vim-gutentags) for my tag usages.\n\n# NERDTree navigation\n\nI still use [NERDTree](https://github.com/scrooloose/nerdtree) for navigation. I find it very helpful to visualize the project structure using a tree explorer. Some folks prefer netrw + [vinegar](https://github.com/tpope/vim-vinegar). They all work similarly - I personally choose NERDTree because it is the first tree explorer I ever used with Vim, plus it looks pretty with [devicons](https://github.com/ryanoasis/vim-devicons) 😅.\n\n# My Vim flow\n\nThere are 6 scenarios during my normal workflow when I would need to navigate between files:\n1. Opening a file I have not opened before (search filename): fzf + rg\n2. Opening a file I have not opened before based on string keyword: fzf + rg\n3. Opening a file from an import/export link inside a file : ctags\n4. Opening a file from tree explorer: NERDTree\n5. Opening a file I've opened before: buffer\n6. Opening (toggle) previously opened file: buffer\n\nWhen I am starting a task, I would open all starting files with fzf + rg. Then I would fly between buffers to edit files. This editing phase took up most of my coding time. Once I am done, I would [clear up buffer list](https://stackoverflow.com/questions/4545275/vim-close-all-buffers-but-this-one) and start all over again.\n\nThere you have it folks, my current vim workflow navigating between files. **Personally, how do you navigate files in Vim?** \n\nPlease feel free to share below!! I would love to hear them.\n\n\nResources/ other readings\n- [Buffers in Vim](https://stackoverflow.com/questions/9962201/what-is-a-buffer-in-vim)\n- [Buffer way](https://stackoverflow.com/questions/26708822/why-do-vim-experts-prefer-buffers-over-tabs)\n\n<small>*I am aware that some of my mapping coincides with Vim's native shortcuts. For example, `<Ctrl-f>` is scroll down full screen. I hardly ever used those features, plus it makes more sense mnemonically (f for find, b for buffer, and p for path)*</small>\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"id":{"type_of":"article","id":105295,"title":"Lazy Loading With IntersectionObserver API","description":"strategy to use intersection observer for lazy loading","cover_image":null,"published":true,"published_at":"2019-05-01T12:25:08.995Z","tag_list":["javascript","webdev","lazyloading","intersectionobserver"],"slug":"lazy-loading-with-intersectionobserver-api-3d6h","path":"/iggredible/lazy-loading-with-intersectionobserver-api-3d6h","url":"https://dev.to/iggredible/lazy-loading-with-intersectionobserver-api-3d6h","canonical_url":"https://dev.to/iggredible/lazy-loading-with-intersectionobserver-api-3d6h","comments_count":3,"positive_reactions_count":55,"page_views_count":746,"published_timestamp":"2019-05-01T12:25:08Z","body_markdown":"---\r\ntitle: Lazy Loading With IntersectionObserver API\r\npublished: true\r\ndescription: strategy to use intersection observer for lazy loading\r\ntags: javascript, webdev, lazy-loading, IntersectionObserver\r\n---\r\n\r\n![lazy-kat](https://thepracticaldev.s3.amazonaws.com/i/dfhkoiqimufpr5zv0z36.gif)\r\n\r\nHello dev.to folks! This is my first post - woot! Pretty excited to share what I have been learning recently about lazy-loading. Please let me know how I can make this better! \r\n\r\nLazy loading image is useful for loading page with many contents. We can easily find libraries to do that, such as [yall.js](https://github.com/malchata/yall.js) and [lozad.js](https://apoorv.pro/lozad.js/). What most of these libraries have in common is they both use [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API). Let’s learn how to use `IntersectionObserver` so we can understand how these libraries work — or even write our own!\r\n\r\nFirst, I will briefly explain what `IntersectionObserver` does and second, how to use it to lazy load your own images.\r\n\r\n# What Does IntersectionObserver do?\r\n\r\n(In layman’s words) `IntersectionObserver` *asynchronously detects when an element intersects with ancestor element (usually viewport) and calls a callback function.*\r\n\r\n![viewport schematics](https://thepracticaldev.s3.amazonaws.com/i/gwvj2lrwfy97ljpj9lv3.png)\r\n\r\nImagine a viewport containing images. When page loads, some images are positioned directly within viewport while some are sitting below viewport, waiting for user to scroll down so they can be seen. As user scrolls down, the top part of some lower-positioned images would eventually intersect with the bottom viewport. It is when the first top image pixel intersects with viewport the callback function loads the image. \r\n\r\n# Sample Usage\r\n\r\nLet’s read the docs! Mozilla kindly gives us a starting point.\r\n\r\n```\r\nvar options = {\r\n  root: document.querySelector('#scrollArea'),\r\n  rootMargin: '0px',\r\n  threshold: 1.0\r\n}\r\n\r\nvar observer = new IntersectionObserver(callback, options);\r\nvar target = document.querySelector('#listItem');\r\nobserver.observe(target);\r\n```\r\n\r\n\r\nAbove is the minimum setup to lazy load `#listItem` (technically options is optional, so `var observer = new IntersectionObserver(callback);` is a more concise way to run it).\r\n\r\nAight, let’s use it on a more realistic scenario. We are going to:\r\n\r\n1. Have 10 images in HTML that we will lazy load\r\n2. Add CSS fade animation\r\n3. Add IntersectionObserver to load images\r\n\r\n# HTML Setup\r\n\r\n```\r\n<div><img data-src=”http://placehold.it/300x300?text=1\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=2\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=3\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=4\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=5\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=6\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=7\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=8\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=9\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=10\"></div>\r\n```\r\n\r\nIf you notice, it does not use `src` but `data-src` attribute. One strategy for lazy loading is to start with HTML’s `data-*` attribute because `data-src` will not load the image.\r\n\r\n# CSS Setup\r\n\r\n```\r\n.fade {\r\n animation-duration: 3s;\r\n animation-name: fade;\r\n}\r\n@keyframes fade {\r\n from {\r\n opacity: 0;\r\n }\r\n to {\r\n opacity: 1;\r\n }\r\n}\r\n```\r\n\r\nThis setup is optional. I think helps with our observation (plus it is more aesthetically pleasing) to have the image lazy load with fade animation.\r\n\r\nBtw, you can check when the image is downloaded on network tabs if you use Chrome DevTool.\r\n\r\n# JS Setup\r\n\r\nI want the images to load only when 50% of it intersects with viewport. This is how to set it up:\r\n\r\n```\r\nconst images = document.querySelectorAll(‘img’)\r\nconst observer = new IntersectionObserver(entries => {\r\n entries.forEach(entry => {\r\n if(entry.isIntersecting) {\r\n const target = entry.target\r\n target.setAttribute(‘src’, target.dataset.src)\r\n target.classList.add(‘fade’)\r\n observer.unobserve(target)\r\n }\r\n })\r\n}, {\r\n threshold: 0.5\r\n})\r\nimages.forEach(image => observer.observe(image))\r\n```\r\n\r\nI want to highlight a few things that I was struggling to understand when learning IntersectionObserver.\r\n\r\n- The argument entries represents all the image element under `IntersectionObserver` (I find it a bit odd having to iterate twice with `images.forEach` and `entries.forEach`, but that’s the way it is done). At initial page load, all entries are called. Some immediately intersects (if they are within viewports when page renders) while some don’t. The ones that immediately intersects have their callback function called immediately.\r\n\r\n- `entry.isIntersecting` returns true when the image intersects with viewport. Another common check for intersectionality is `entry.intersectionRatio > 0`.\r\n\r\n- As mentioned before, a common strategy for lazy-loading is to initially start without `src`. We transfer values from `data-src` to `src` right before user is about to see it.\r\n\r\n- It is good practice to unobserve the object after it has been loaded.\r\nWe can change the amount or location of intersectionality with either `threshold` or `rootMargin` option. The ancestor element can be changed with root (default is viewport).\r\n\r\n# Conclusion\r\n\r\nAt the time of this writing, intersectionObserver is usable in major browsers except for IE. Check [caniuse](https://caniuse.com/#feat=intersectionobserver) site for complete list.\r\n\r\n`IntersectionObserver` is useful to lazy load element into viewport by passing the value from data-src into src upon callback. The same strategy can be applied to other elements.\r\n\r\nBelow are articles I read regarding `IntersectionObserver` I found useful (I am not affiliated with any of them, just appreciative of the information they gave and I hope it will help you too!)\r\n\r\n- [fireship](https://fireship.io/snippets/intersection-observer-lazy-load-images/)\r\n\r\n- [alligatorio](https://alligator.io/js/intersection-observer/)\r\n\r\n- [googledev](https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/)\r\n\r\nPlease feel free to let me know if you find any mistakes or how I can improve this. Thank you so much for reading this far. Y’all are awesome!","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"vim-cheatsheet-to-move-around-in-a-file-plus-tips-to-use-them-bme":{"type_of":"article","id":189388,"title":"Vim cheatsheet to move around in a file (plus tips to use them)","description":"vim cheatsheet for moving around in a file","cover_image":null,"published":true,"published_at":"2019-10-17T12:33:15.720Z","tag_list":["vim","neovim","cheatsheet","navigation"],"slug":"vim-cheatsheet-to-move-around-in-a-file-plus-tips-to-use-them-bme","path":"/iggredible/vim-cheatsheet-to-move-around-in-a-file-plus-tips-to-use-them-bme","url":"https://dev.to/iggredible/vim-cheatsheet-to-move-around-in-a-file-plus-tips-to-use-them-bme","canonical_url":"https://dev.to/iggredible/vim-cheatsheet-to-move-around-in-a-file-plus-tips-to-use-them-bme","comments_count":9,"positive_reactions_count":81,"page_views_count":3009,"published_timestamp":"2019-10-17T12:33:15Z","body_markdown":"---\ntitle: Vim cheatsheet to move around in a file (plus tips to use them)\npublished: true\ndescription: vim cheatsheet for moving around in a file\ntags: vim, neovim, cheatsheet, navigation\n---\n\nBeing able to freely move around in a file is an indispensable vim skill. \n\nBelow is a list of the commands I use to move around in a file. I will also share some tips to move around efficiently and how you can start applying it.\n\n<a name=\"navigations\"></a>\n# Table of Contents\n- [Navigations](#navigations)\n  * [Setup Your Numbers](#setup)\n  * [Character Navigation](#character-nav)\n  * [Word Navigation](#word-nav)\n  * [Current Line Navigation](#current-line-nav)\n  * [Match Navigation](#match-nav)\n  * [Function Navigation](#func-nav)\n  * [Block Navigation](#block-nav)\n  * [Line Navigation](#line-nav)\n  * [Screen Navigation](#screen-nav)\n  * [Search Navigation](#search-nav)\n  * [Scrolling](#scrolling)\n- [General tips on navigating](#navigating-tips)\n- [How to apply this cheatsheet](#application-tips)\n\n\n<a name=\"setup\"></a>\n# Setup Your Numbers\nBefore starting, I find it helpful to have `number` and `relativenumber` set on vim. You can do it by running `:set relativenumber number` or having this on `.vimrc`:\n\n```\nset relativenumber\nset number\n```\n\nThis tells my current position and displays *n* lines above/ below my current position.\n\n<a name=\"character-nav\"></a>\n# Character navigation \nNavigating around text:\n\n```\nh  left\nj  down\nk  up\nl  right\n```\n\n<a name=\"word-nav\"></a>\n# Word navigation \n\n```\nw  move forward to the beginning of next word\nW  move forward to the beginning of next WORD*\ne  move forward one word to the end of next word\nE  move forward one word to the end of next WORD\nb  move backward to beginning of previous word\nB  move backward to beginning of previous WORD\nge  move backward to end of previous word\ngE  move backward to end of previous WORD\n```\n\n\\* <small>From `:h WORD`: A WORD consists of a sequence of non-blank characters, separated with white space.  An empty line is also considered to be a WORD.</small>\n\n<a name=\"match-nav\"></a>\n# Match navigation \n\n```\n%  Navigate to another match, usually works for (), [], {}\n```\n\n(with [matchit.vim](https://github.com/vim/vim/tree/a87b72cc316e065d66dcbcf7ec1cde330adef3a3/runtime/macros) on), we can now toggle within methods.\n\n<a name=\"block-nav\"></a>\n# Block navigation \n\n```\n{ Jump to prev paragraph\n} jump to next paragraph\n( Jump to prev sentence\n) Jump to next sentence\n```\n\n<a name=\"line-nav\"></a>\n# File Line navigation \n\n```\ngg  go to first line\nG  go to last line\nnG  go to line n\nn%  go to n% in file\n``  go to last jump position\n```\n\nBtw, you can see how many lines in a file with `CTRL-G`. \n\n<a name=\"current-line-nav\"></a>\n# Current line navigation \n\n```\n0  go to first character of current line\n^  go to first nonblank char of current line\nn|  go column n of current line\ng_  go to last non-blank char of current line\n$  go to last char of current line\n```\n\n\n<a name=\"screen-nav\"></a>\n# Screen navigation \n\n```\nH  go to top of screen\nM  go to medium screen\nL  go to bottom of screen\nnH  go n line from top\nnL  go n line from bottom\n```\n\n<a name=\"scrolling\"></a>\n# Scrolling screen \n\n```\nCtrl-e  scroll down lines\nCtrl-d  scroll down half screen\nCtrl-f  scroll down whole screen\nCtrl-y  scroll up lines\nCtrl-u  scroll up half screen\nCtrl-b  scroll up whole screen\n```\n\n<a name=\"func-nav\"></a>\n# Function/ Module Navigation \n\n```\n]m  go to the start of next method\n[m  go to the start of previous method\n]M  go to the end of next method\n[M  go to the end of previous method\n]]  go to next class/ module\n[[  go to previous class/module\n```\n\nFor more information on function/module navigation, [this vid by Drew Neil](https://thoughtbot.com/upcase/videos/navigating-within-ruby-files) is very informative!\n\n<a name=\"search-nav\"></a>\n# Search navigation \n\n```\n/  Search forward for a match\n?  Search backward for a match\nn  Repeat last search (same direction as previous search)\nN  Repeat last search (opposite direction as previous search)\nf  Search forward for a match in the same line\nF  Search backward for a match in the same line\nt  Search forward for a match in the same line, stopping before match\nT  Search backward for a match in the same line, stopping before match\n;  Repeat last search in the same line\n,  Repeat last search in the same line backwards\n*  Quickly search for word under cursor forward\n#  Quickly search for word under cursor backward\n```\n\nPhew! Some items above I use almost every time, some I hardly ever used, but it's good to know they exist. Find one that works for you.\n\n<a name=\"navigating-tips\"></a>\n# General tips on navigating \n\nWhen moving around in Vim, it is important to see patterns inside a file. Moving in vim reminds me of painting, start with the broadest stroke you know. \n\n- Is the word you're targeting  slightly past the halfway length of the file? Start with `50%` then go down with `j`.\n- Is it on line 73? This is awesome, jump directly there with `73G`\n- Is the text 3 paragraphs down? Do `}}}` instead of mashing `j` buttons.\n- Do you know that it is near a unique keyword `const uniqueKeyword = 'UNIQUE'`? Search-jump with `/uniqueKeyword`\n\nIf when you arrive on target *line*, the target word is still far near the end of the sentence, you can approach it with (`w`) - or if possible, look for unique letter around that target word. For example, if the sentence is:\n\n```\nI ate a fried fish next to a zebra today\n```\n\nAssume that you are starting with your cursor on \"I\". You want to edit \"a\" before zebra. Start by \"find z\" (`fz`) because \"z\" is not a commonly used letter then backtrack with `b`. Typing `fzb`(3 keystrokes) is faster than going to end then backtrack `$bbb` (4 keystrokes) and it is faster than `wwwwwww` (7 keystrokes). The last thing we want to do it pressing a lot of `l`'s. Can you think of a pattern that get you there with less keystrokes? This is what makes vim fun!\n\nTo get better at it, spend a few days playing [vimgolf](https://www.vimgolf.com/). Trust me, you will learn a lot.\n\n\n<a name=\"application-tips\"></a>\n# How to apply this cheatsheet \n\nYou might be thinking: \"O geez, there are so many of them! How can I possibly remember all of them?\"\n\nHere are my personal tips:\n\n- DO NOT try to commit all of them into memory in one sitting. \n- Learn 5-6 of them today, use them every day for a week! Don't rush - what's the hurry?\n- Learn another 5-6 next week while using the ones you learned previously.\n- Do vimgolf and see how you fare *on your own*, then learn from other golfers.\n- It took me almost a year to learn the above. I am still learning something new every week about Vim. Doing Vim is a long term commitment.\n- Learn to utilize help `:h`.\n\n\nIf you are brand new to Vim and feel overwhelmed where to start, here are some commands you should learn first:\n\nBasic navigations:\n```\nh\nj\nk\nl\n```\n\nWord Navigation:\n```\nw\nb\n```\n\nJump to line n\n```\nnG  // ex: 1G, G, 73G\n```\nSearches: \n```\n/\n? \nn\n```\nThese 10 should put you in a really good position to move around in a file.Then slowly add more to your arsenal.\n\nThanks for reading! Appreciate you making it this far. If you have more tips or questions, or found a mistake 😅, please feel free to comment below!\n\n![Cheat sheet - you can do it](https://media.giphy.com/media/DddiSElbjDAzu/giphy.gif)","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"scratch-notes-in-vim-3eai":{"type_of":"article","id":186630,"title":"Scratch notes in vim","description":"scratch notes in vim","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--CXpNbcVb--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/cimlrdra1h3m4xkdabnp.png","published":true,"published_at":"2019-10-11T12:01:58.712Z","tag_list":["vim","productivity","scratch","scratchnotes"],"slug":"scratch-notes-in-vim-3eai","path":"/iggredible/scratch-notes-in-vim-3eai","url":"https://dev.to/iggredible/scratch-notes-in-vim-3eai","canonical_url":"https://dev.to/iggredible/scratch-notes-in-vim-3eai","comments_count":0,"positive_reactions_count":12,"page_views_count":125,"published_timestamp":"2019-10-11T12:01:58Z","body_markdown":"---\ntitle: Scratch notes in vim\npublished: true\ndescription: scratch notes in vim\ntags: vim, productivity, scratch, scratch-notes\n---\n\nWhile coding, sometimes I need to quickly take notes to capture random thoughts. Mac's [Notes](https://support.apple.com/guide/notes/welcome/mac) used to be my default go-to app. However, wouldn't it be nice if I can take scratch notes inside Vim so it won't disrupt my flow?\n\nWell devs, if you're wondering the same thing, you're in for a treat! Vim **has** a built-in ability to write scratch notes and here is how you can do it too!\n\n![Taking notes](https://media.giphy.com/media/L17xM7PvLcqJggsCYa/giphy.gif)\n\n\nBefore we start, let's make sure we are on the same page. In my ideal world, a scratch note needs to:\n1. Not be saved into our directory (otherwise we are creating new file)\n2. Not get lost when hidden\n3. Be quick to access\n\n# Powered by :new\n\nVim's scratch note starts from `:new` command (`:vnew` works too), a command to create new window. \n\nOnce a new window is generated, we need to add additional setups:\n\n```\n:setlocal buftype=nofile\n:setlocal bufhidden=hide\n:setlocal noswapfile\n```\n\nI will explain what they do:\n\n1. setting `buftype=nofile` will tell vim that this newly-created buffer should be considered nofile type. If you noticed in buffers list (`:buffers`), originally our new file is listed as `\"[No Name]\"`. After adding `:setlocal buftype=nofile`, it will now be listed as `\"[Scratch]\"`! This means Vim categorizes any nofiles as scratch file type.\n\n2. Adding `bufhidden=hide` will keep it persistent when the buffer is hidden. Without this setting, if your current scratch buffer gets hidden by another buffer, it will disappear... forever 😱😱!! Adding bufhidden=hide prevents this so it is accessible until we exit vim.\n\n3. `noswapfile` prevents swapfile from being generated.\n\n# Improvements\n\nAlthough I think this capability is great, it is still not quick to access. We have to call 3 setlocals each time we generate new scratch notes. Wouldn't it be nice if we can setup our vim to automatically perform those setups?\n\nAfter playing around a bit, here's an example script I came up to address that issue. Add this inside your `.vimrc`:\n\n```\nfunction! s:ScratchGenerator()\n  echom \"Creating scratchy...\"\n  exe \"new\" . \"__Scratchy__\"\n  echom \"Scratchy created!\"\nendfunction\n\nfunction! s:ScratchMarkBuffer()\n  setlocal buftype=nofile\n  setlocal bufhidden=hide\n  setlocal noswapfile\nendfunction\n\nautocmd BufNewFile __Scratchy__ call s:ScratchMarkBuffer()\ncommand! Scratchy call s:ScratchGenerator()\n```\n\nWhat's going on here? I'll start from the end:\n\n```\ncommand! Scratchy call s:ScratchGenerator()\n```\nThis adds a new command `:Scratchy`. When we invoke it, it calls ScratchGenerator function, which creates a new file named `\"__Scratchy__\"`.\n\n```\nautocmd BufNewFile __Scratchy__ call s:ScratchMarkBuffer()\n``` \nThis is an [autocommand](http://vimdoc.sourceforge.net/htmldoc/autocmd.html) that gets invoked if new buffer file (`BufNewFile`) is created *and* that buffer is named exactly `\"__Scratchy__\"`. \n\nSource your `.vimrc`. You can now create a scratch note by typing command `:Scratchy` from normal mode!\n\nTo access it even quicker, you can add shortcut. \n\nI like to keep it memorable, so my shortcut choice is *Ctrl+s* (for scratch). The mapping is:\n\n```\nnnoremap <C-s> :Scratchy<CR>\n```\n\nNow every time I have an itch for scratch notes (pun intended 😃), I can just press *Ctrl+s*!\n\nAlternatively, there is a vim plugin called [`scratch.vim`](https://github.com/mtth/scratch.vim) with more feature. Experiment to create your perfect scratch note! \n\n\nThat's it! Now you can scratch that off your list!\n\n# Resources\n- `:h new`, then search for \"scratch\" (`/scratch`)\n- [scratch.vim](https://github.com/mtth/scratch.vim)\n- Another, simpler [scratch.vim](https://github.com/vim-scripts/scratch.vim)","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"share-your-methods-to-measure-and-improve-personal-productivity-52lg":{"type_of":"article","id":185198,"title":"Share your methods to measure and improve personal productivity!","description":"productivity tips discussion","cover_image":null,"published":true,"published_at":"2019-10-06T13:02:27.349Z","tag_list":["discuss","productivity","tips","selfimprovement"],"slug":"share-your-methods-to-measure-and-improve-personal-productivity-52lg","path":"/iggredible/share-your-methods-to-measure-and-improve-personal-productivity-52lg","url":"https://dev.to/iggredible/share-your-methods-to-measure-and-improve-personal-productivity-52lg","canonical_url":"https://dev.to/iggredible/share-your-methods-to-measure-and-improve-personal-productivity-52lg","comments_count":10,"positive_reactions_count":8,"page_views_count":355,"published_timestamp":"2019-10-06T13:02:27Z","body_markdown":"---\ntitle: Share your methods to measure and improve personal productivity!\npublished: true\ndescription: productivity tips discussion\ntags: discuss, productivity, tips, self-improvement\n---\n\nI wanted to see what system you guys have to measure and improve your productivity outside of work. By productivity, I mean everything from self-improvement, contributing to open source, or maintaining side projects or business. \n\n## Personal example\n\n**Everyday, for 6 days a week, I try to accumulate at least 90 productivity minutes**. I define *productivity minutes* loosely: any time spent reading or writing outside of work. \n\nI use [forest](https://www.forestapp.cc/) app to keep track of time - it is a distraction-free pomodoro app (to be honest, a simple stopwatch can accomplish same thing). \n\nFor example, I wake up around 6:30 (or 7 if I'm really tired 😅) and read for **10 minutes**. Then around breakfast, I would read some articles for **10-15** minutes and write (usually for dev.to) for **5-30** minutes. Then I'm off to work. During lunch, sometimes I would code for **30 minutes**. During my commute, I would listen to audiobooks (thanks, [scribd](https://www.scribd.com/)!) for **10-15 minutes** each way. After work, in the evening, I would code/ read for **30+ minutes**.\n\nThe schedule above would yield me a good 100 minutes per day. I usually take Sunday off as my day of rest. I would still read and write, but I would only impose 25 productivity minutes instead of 90.\n\n## Problems \n\nSome of the problem I am starting to see with my method:\n\n1. *All minutes are counted equally when not all minutes spent doing different things do not yield equal result.* I think the time spent producing things (writing articles, writing code for open source) is more valuable than the time spent reading. I am definitely not undervaluing reading here; I am a HUGE advocate of reading a lot of stuff everyday - I am saying in the long run, psychologically, I would want to spend more time reading all the time because it is easier to read than actually writing and producing things; it takes more effort for me to write code than to read code. I would think, \"why not accumulate all my productivity minutes reading if writing takes more effort and counts the same as reading?\". \n\n2. *There is a tendency to sacrifice life by wanting to accumulate more minutes everyday.* I notice that I would rather spend my evening reading and writing than spending it with my wife (retrospectively, I don't think spending whole evening in front of screen with your spouse is healthy either). It is easy to gravitate doing stuff for yourself than for others.\n\n<hr />\n\nThere you have mine. I am curious to see what you guys do. Don't feel obligated to share every little detail. I would like to hear what you guys do to measure and improve your productivity so we can learn from each other and come up with the solution that is best for each of us!","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"},"flare_tag":{"name":"discuss","bg_color_hex":"#000000","text_color_hex":"#FFFFFF"}},"quick-vim-tips-to-generate-and-increment-numbers-3849":{"type_of":"article","id":175856,"title":"Quick vim tips to generate and increment numbers","description":"Generate and increment numbers quickly in vim","cover_image":null,"published":true,"published_at":"2019-09-25T12:57:31.350Z","tag_list":["vim","productivity","tips","numbers"],"slug":"quick-vim-tips-to-generate-and-increment-numbers-3849","path":"/iggredible/quick-vim-tips-to-generate-and-increment-numbers-3849","url":"https://dev.to/iggredible/quick-vim-tips-to-generate-and-increment-numbers-3849","canonical_url":"https://dev.to/iggredible/quick-vim-tips-to-generate-and-increment-numbers-3849","comments_count":1,"positive_reactions_count":12,"page_views_count":175,"published_timestamp":"2019-09-25T12:57:31Z","body_markdown":"---\ntitle: Quick vim tips to generate and increment numbers\npublished: true\ndescription: Generate and increment numbers quickly in vim\ntags: vim, productivity, tips, numbers\n---\n\nThere are times when I need to either increment or generate a column of numbers quickly in vim. Vim 8/ neovim comes with useful number tricks.\n\n![magician](https://media.giphy.com/media/KmIR3x7UG4cFy/giphy.gif)\n\nI will share two of them here.\n\n# Quickly generate numbers with put and range\n\nYou can quickly generate ascending numbers by\n\n```\n:put=range(1,5)\n```\nThis will give you:\n\n```\n1\n2\n3\n4\n5\n```\n\nWe can also control the increments. If we want to quickly generate descending number, we do:\n\n```\n:put=range(10,0,-1)\n```\n\nSome other variations:\n\n```\n:put=range(0,10,2) // increments by 2 from 0 to 10 \n:put=range(5)      // start at 0, go up 5 times\n```\n\nThis trick might be helpful to generate a list when taking notes. In vim, display current line, we can use `line('.')`. This can be combined with put/range. Let's say you are currently on line # 40. To generate numbers to line 50, you do:\n\n```\n:put=range(line(','),50)\n```\n\nAnd you'll get:\n\n```\n40 // prints at line 41.\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n```\n\nTo adjust line number above, you change it to be `:put=range(line('.')+1,50)` to show the correct line number.\n\n# Quickly increment column of numbers\n\nSuppose we have a column of numbers, like the 0's in HTML below:\n\n```\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n```\n\nIf we want to increment all the zeroes (1, 2, 3, ...), we can quickly do that. Here is how:\n\nFirst, move cursor to top 0 (I use `[]` to signify cursor location).\n\n```\n<div class=\"test\">[0]</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n<div class=\"test\">0</div>\n```\n\nUsing `VISUAL BLOCK` mode (`<C-v>`), go down 8 times (`<C-v>8j`) to visually select all 0's.\n\n```\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n<div class=\"test\">[0]</div>\n```\n\nNow type `g <C-a>`. Voila!\n\n```\n<div class=\"test\">1</div>\n<div class=\"test\">2</div>\n<div class=\"test\">3</div>\n<div class=\"test\">4</div>\n<div class=\"test\">5</div>\n<div class=\"test\">6</div>\n<div class=\"test\">7</div>\n<div class=\"test\">8</div>\n<div class=\"test\">9</div>\n```\n\n![shocked](https://media.giphy.com/media/Ki9ZNTNS7aC9q/giphy.gif)\n\n_Wait a minute... what just happened?_\n\nVim 8 and neovim has a feature that automatically increment numbers with `<C-a>` (and decrement with `<C-x>`). You can check it out by going to `:help CTRL-A`.\n\nWe can also change the increments by inserting a number ahead. If we want to have `10,20,30,...` instead of `1,2,3,...`, do `10g<C-a>` instead.\n\n_Btw, one super-cool-tips with `<C-a>` and `<C-x>` - you can increment not only numbers, but octal, hex, bin, and alpha! For me, I don't really use the first three, but I sure use alpha a lot. Alpha is fancy word for *alpha*betical characters. If we do `set nformats=alpha`, we can increments alphabets like we do numbers._\n\nIsn't that cool or what? Please feel free to share any other number tricks with Vim in comment below. Thanks for reading! Happy vimming!","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"how-to-search-and-replace-string-in-multiple-files-in-vim-20g2":{"type_of":"article","id":173776,"title":"How To Search And Replace String Across Multiple Files in Vim","description":"Vim search and replace multiple files","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--SLfjF15u--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/9kzzlk8t7371wk98eoiv.png","published":true,"published_at":"2019-09-21T14:34:07.564Z","tag_list":["vim","search","substitute","replace"],"slug":"how-to-search-and-replace-string-in-multiple-files-in-vim-20g2","path":"/iggredible/how-to-search-and-replace-string-in-multiple-files-in-vim-20g2","url":"https://dev.to/iggredible/how-to-search-and-replace-string-in-multiple-files-in-vim-20g2","canonical_url":"https://dev.to/iggredible/how-to-search-and-replace-string-in-multiple-files-in-vim-20g2","comments_count":9,"positive_reactions_count":59,"page_views_count":3108,"published_timestamp":"2019-09-21T14:34:07Z","body_markdown":"---\ntitle: How To Search And Replace String Across Multiple Files in Vim\npublished: true\ndescription: Vim search and replace multiple files\ntags: vim, search, substitute, replace\ncover_image: https://thepracticaldev.s3.amazonaws.com/i/9kzzlk8t7371wk98eoiv.png\n---\n\nA useful feature that popular editors like VSCode and Atom has is the ability to search and replace string across many files in a project. Wouldn't it be nice if Vim can do the same thing?\n\nFortunately, Vim too, is capable of doing that, although it may not be intuitive at first. The best thing is, we won't have to install any plugin to do this! I will show two ways how we can do search and replace across multiple files in Vim. But before, let's go over the fundamentals.\n\n# Single-file search and replace (substitution)\n\nFeel free to skip to next section if you know Vim's basic substitution.\n\nSubstitution in vim is done by:\n```\n:%s/stringToBeReplaced/replacementString/g\n```\n\nRegex works too. I will skip the regex details here, but you can read up more about it at `:h substitute`.\n\n# Args\n\nDo you know that Vim has `:ar[gs]` command that accepts a list of files?\n\nLet me show you how we can use args. Let's assume our directory contains something like this:\n\n```\n├── index.js\n├── server.js\n```\n\nTo capture `index.js` and `server.js`, we can do `:args *.js`. Typing `:args` now will display\n\n```\n[index.js] server.js\n```\n\nTo go to next args, type `:n[ext]` and `:prev[ious]` to go to previous args list.\n\nWe can also use glob against args to search recursively. Here are more ways you can use args:\n\n```\n:args index.js server.js // captures only index and server js files\n:args **/*.js            // captures every js files\n:args **                 // captures everything \n```\n\nArmed with `:s` and `:args`, we are ready to perform our substitutions!\n\n# Method1: Using argdo\n\nNow that we have all args, we can perform our regular substitution. \nRecalling our substitution method, we will combine it with `argdo`.\n\n```\n:argdo %s/stringToBeReplaced/replacementString/g | update\n```\n\nThis replaces ALL foo with bar and applies it to all args.\n\nIf you're baffled by argdo, you're not alone. I never heard of it until not too long ago. It is actually pretty simple. If we look at `:h argdo`, it does:\n\n> Execute {cmd} for each file in the argument list...\n\nIn short, it apples all `{cmd}` you pass into all argument list, which is all js files. What we are passing is our substitution command.\n\nThe `update` is optional. It saves all replaced files. I do it because I usually forget to save them. \n\n# Method2: perform substitution with macros and repeat it\n\nWhile recording a macro, perform substitution on one file, and repeat the macros across all args.\n\nAssuming the same folder structure and args, here is how it is done:\n\n```\nqq                                          // start macro in q register\n%s/stringToBeReplaced/replacementString/ge  // the e flag tells vim to not throw an error if there is no match\n:wnext                                      //important. This is similar to `:next`, but it also writes the current file\nq                                           // stop macro\n999@q                                       //repeat this macros either 999 times or to remaining files.\n```\n\nThat's it! \n\n*Is there another trick that you use to do global search and replace? I'd love to hear it!*\n\n![thumbs-up](https://media.giphy.com/media/XreQmk7ETCak0/giphy.gif)\n\n*Btw, here's a fun part. The second method is actually listed inside Vim's \"clever tricks\" user manual (available for vim 7.3 and up and Neovim). If you have time, you should check out the entire section (`:h usr_12.txt`). It is fairly readable, short, and contains super fun vim hacks!!*\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"gentle-introduction-to-git-merge-and-git-rebase-27oc":{"type_of":"article","id":167531,"title":"Gentle introduction to git merge and git rebase","description":"differences between git merge and git rebase","cover_image":null,"published":true,"published_at":"2019-09-18T18:01:01.820Z","tag_list":["git","merge","rebase","sourcecontrol"],"slug":"gentle-introduction-to-git-merge-and-git-rebase-27oc","path":"/iggredible/gentle-introduction-to-git-merge-and-git-rebase-27oc","url":"https://dev.to/iggredible/gentle-introduction-to-git-merge-and-git-rebase-27oc","canonical_url":"https://dev.to/iggredible/gentle-introduction-to-git-merge-and-git-rebase-27oc","comments_count":0,"positive_reactions_count":11,"page_views_count":108,"published_timestamp":"2019-09-18T18:01:01Z","body_markdown":"---\ntitle: Gentle introduction to git merge and git rebase\npublished: true\ndescription: differences between git merge and git rebase\ntags: git, merge, rebase, source-control\n---\n\nOne of my biggest weakness in programming is using git. There were times when I thought I might accidentally remove the file I have been working on because I didn't know what I was doing.\n\nOne common use of git is applying feature branch into master branch. I want to go over two popular commands: `git rebase` and `git merge`, in the most gentle way possible. Hopefully at the end of this article, you'll understand what each of them does and why they differ.\n\n# Getting started\n\nLet's code along with me (this shouldn't require you to actually create a new project in github). Create a directory and create an empty git repository.\n\n```\nmkdir git-playground && cd $_\ngit init\n```\n\nCreate a txt file, pretend that will be the file everyone will be working on.\n\n```\ntouch main.txt\necho \"master1\" >> main.txt\n```\n\nThis will be our first commit, let's commit it with the same commit name so we can distinguish it.\n\n```\ngit add .\ngit commit -m \"master1\"\n```\n\nCheck our git log, we should see only one thing, our \"master1\" commit.\n\n```\ngit log\n```\n\nPretend another work is done on master branch the same file! Let's add another content. Add that change and commit it.\n\n```\necho \"master2\" >> main.txt\nless main.txt // should say \"master1\" and \"master2\"\ngit commit -am \"master2\" // git add and commit at the same time\n```\n\nUp to this point, everything has been pretty linear. Then one day our boss asks us to work on a feature separately. We create a new branch and work on our feature there. Later it will applied back to master.\n\n```\ngit checkout -b feature1\n```\n\nOur feature work will be to update `main.txt`\n\n```\necho \"feature1\" >> main.txt\ngit commit -am \"feature1\"\n```\n\nUpon git logging, you will see 3 items:\n\n```\ncommit 9238fc8a51ca9ba07716218c8c70ad1747488240\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:43:24 2019 -0500\n\n    feature1\n\ncommit b1c6125495497dc36310501d4decebf8d3690bd5\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:39:42 2019 -0500\n\n    master2\n\ncommit d0a5a8847025736fbf8903ba517b71e9c1c3cfed\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:37:37 2019 -0500\n\n    master1\n```\n\nLet's pretend at the same time we are working on feature, someone else worked on another feature and pushed it to master.\n\nGo back to master branch.\n\n```\ngit checkout master\necho \"master3\" >> main.txt\ngit commit -am \"master3\"\n```\n\nInside the file, you should see\n\n```\nmaster1\nmaster2\nmaster3\n```\n\nNote: since we switched branch, all our work in feature branch remains in feature branch. \n\nIf we check git log:\n```\ncommit fbf7329cc6be6e1e44527e5ed5749adfe14b9ebf\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:47:54 2019 -0500\n\n    master3\n\ncommit b1c6125495497dc36310501d4decebf8d3690bd5\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:39:42 2019 -0500\n\n    master2\n\ncommit d0a5a8847025736fbf8903ba517b71e9c1c3cfed\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:37:37 2019 -0500\n\n    master1\n```\n\nOur feature work is ready to be applied to master, but... what is the best way to bring together our feature work into master branch in this case?\n\nWe can do it with either git merge and git rebase. Let's go through each together.\n\n![our state now](https://thepracticaldev.s3.amazonaws.com/i/rsj4zl6dxnsbdfajwhgw.png)\n\n# Git merge\n\nLet's go back to master branch and merge feature branch.\n\n```\ngit checkout master\ngit merge feature1\n```\n\nOops, we have a conflict. Git looks at the change history and found that both `master` and `feature1` branch each implements a change at the same location. It isn't sure what to do with this same change.\n\nLet's fix it. Go to `main.txt`, you should see this:\n\n```\nmaster1\nmaster2\n<<<<<<< HEAD\nmaster3\n=======\nfeature1\n>>>>>>> feature-branch\n```\n\nEverything between \"<<<<<<< HEAD\" and \"=======\" are coming from our [current checked-out branch](http://researchhubs.com/post/computing/git/what-is-HEAD-in-git.html) and everything that is between \"=======\" and \">>>>>>> feature-branch\" are all  incoming work.\n\nBtw, other works that aren't conflicting are automatically applied by git. So if we had made changes in other files and they don't conflict, those changes will be applied to master branch automatically.\n\nWe want our feature works to be after master3, let's clean it up to look like this:\n\n```\nmaster1\nmaster2\nmaster3\nfeature1\n```\n\nSave then `git add .`, then do `git commit`. You'll see a `\"COMMIT_EDITING\"` window with its default text being `\"Merge branch 'feature1'\"`. You can change them to whatever you want or leave it as default (`:wq`). This will be the commit message for merging.\n\nWhen you git log, you'll see:\n\n```\ncommit 623f8868826b6622b62d8d2949ce26ff79463621\nMerge: fbf7329 9238fc8\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Fri Sep 13 07:42:54 2019 -0500\n\n    Merge branch 'feature1'\n\ncommit fbf7329cc6be6e1e44527e5ed5749adfe14b9ebf\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:47:54 2019 -0500\n\n    master3\n\ncommit 9238fc8a51ca9ba07716218c8c70ad1747488240\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:43:24 2019 -0500\n\n    feature1\n\ncommit b1c6125495497dc36310501d4decebf8d3690bd5\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:39:42 2019 -0500\n\n    master2\n\ncommit d0a5a8847025736fbf8903ba517b71e9c1c3cfed\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Thu Sep 12 07:37:37 2019 -0500\n\n    master1\n```\n\nOne thing you'll notice, although we technically have 4 commits: \"master1, master2, master3, feature1\", git considers the act of merging branches as a commit in itself. That's why whenever you run a git merge, you'll see an additional commit (usually called \"Merge branch 'X-BRANCH'\").\n\nFrom [docs](https://git-scm.com/docs/git-merge), git merge \"incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch\"\n\nThe important thing here is \"since the time their histories diverged\". Git looks back at the point where their histories diverged, which is master2. It diffs for all changes applied since then (the word \"master3\" in master branch and the word \"feature1\" in feature branch). Git finds these two changes and tries to put them together (auto-merge). Since they are changes in the same spot, git is conflicted (pun intended). \n\nHowever, if we had made a change in a new folder inside our feature1 branch, git would apply ALL new changes. This [SO post](https://stackoverflow.com/questions/14961255/how-does-git-merge-work-in-details) is super helpful to give high-level overview of git-merge. \n\nOther readings on git merge:\n\n- [how to use git merge the correct way](https://dev.to/neshaz/how-to-use-git-merge-the-correctway-25pd)\n- [git merging what happens to the merged branch](https://stackoverflow.com/questions/39848521/git-merging-what-happens-to-the-merged-branch)\n\n\n# Git rebase\n\nLet's rewind to the point where we have feature1 work in feature-branch and master3 in master branch (right before \"Git Merge\" section above). Make sure we are inside feature branch.\n\n```\ngit checkout feature-branch\ngit rebase master\n```\n\nWe will see a conflict. Remember, we added \"feature1\" in the same place as \"master3\". We will need to fix that.\n\nBtw, if you git log now you'll see:\n\n```\ncommit b71640c9c9440e3a728f299d7c53889d7d02e101\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Sat Sep 14 09:49:00 2019 -0500\n\n    master3\n\ncommit 3272efa79a998460a8a19aacbc8ed9e1333eca06\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Sat Sep 14 09:47:54 2019 -0500\n\n    master2\n\ncommit ad41707299da77d711204226c5c4e3b2f4b37869\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Sat Sep 14 09:47:41 2019 -0500\n\n    master1\n```\n\nHere is what's inside main.txt:\n\n```\nmaster1\nmaster2\n<<<<<<< HEAD\nmaster3\n=======\nfeature1\n>>>>>>> feature1\n```\n\nWe want our feature to be after master3, so clean it up:\n\n```\nmaster1\nmaster2\nmaster3\nfeature1\n```\n\nOnce everything is cleaned up, add the changes and continue rebase\n\n```\ngit add .\ngit rebase --continue\n```\n\nIf we do git log, you'll see that the history is lined up nicely:\n\n```\ncommit a5b2d0a963a29bf68f7654279b8979e7a08e08f3\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Sat Sep 14 09:48:32 2019 -0500\n\n    feature1\n\ncommit b71640c9c9440e3a728f299d7c53889d7d02e101\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Sat Sep 14 09:49:00 2019 -0500\n\n    master3\n\ncommit 3272efa79a998460a8a19aacbc8ed9e1333eca06\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Sat Sep 14 09:47:54 2019 -0500\n\n    master2\n\ncommit ad41707299da77d711204226c5c4e3b2f4b37869\nAuthor: Iggy <igoririanto@rocketmail.com>\nDate:   Sat Sep 14 09:47:41 2019 -0500\n\n    master1\n```\n\nHowever, we are still inside feature branch. Do `git checkout master` - we see that we don't have feature1 change yet. We rebased feature against master, but not master against feature yet. Let's rebase master against feature branch.\n\n```\ngit rebase feature-branch\n```\n\nIt should rebase without conflict since we cleaned up the conflict earlier. If you check `git log` and `less main.txt`, you will see all the feature branch changes. Congratulations! You have rebased successfully!\n\n\nOk, by now you might ask - what just happened? Why are we rebasing two times? \n\nThe first time we rebase (when we are in feature branch and we run `git rebase master`), git rebase looks for a common \"base\" between feature branch and master. By common base, I mean common commit. In this case, our common commit is `\"master2\"` commit. It also finds that master has \"master3\" that feature branch does not have. \n\nThen it makes \"master3\" instead of \"master2\" our feature branch's new base (*hence the word rebase*). After making \"master3\" our new base, all changes done in feature branch is applied on top of new base. That's why on git log we see master1 -> master2 -> master3 -> feature1. This is the first rebase.\n\nWhen we check out master branch after rebasing, we run `git rebase feature1`. Git searches for common base between master and feature branch and finds that master3 is the common branch, cool! Since both branches share the same base, master is not rebased. However, it finds that feature has commits that are not in master, so it applies feature1 into master.\n\nResources on git rebase: \n- [git-rebase](https://git-scm.com/docs/git-rebase)\n\nAnd that's it! Our master now successfully rebased with our feature changes. \n\n![everything is linear](https://thepracticaldev.s3.amazonaws.com/i/x16oe8ox92k1n1qslp16.png)\n\n# Should I merge or rebase?\n\nNow the question is, what do we use? The answer is, as always, *depends*.\n\nJust remember these things: \n\nGit merge generates a commit while merging and preserves all history. It is messier but makes things traceable (we can tell when a merge is done from history). What we did is readable because there were not a lot going on, but imagine a team of 30-50 developers doing daily merges. \n\nGit rebase is a lot cleaner, but hard to trace things back because it rewrites history (if you see git log after what we just did, it's hard to tell that a rebase just happened).\n\n\nYet more resources: \n\n- [git rebase](https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase)\n- [the git rebase introduction I wish I'd had](https://dev.to/maxwell_dev/the-git-rebase-introduction-i-wish-id-had)\n\nIf you find a mistake, please feel free to let me know in the comments. I appreciate you guys reading this far. Happy coding all!","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"learn-git-grep-to-boost-your-command-line-search-jh7":{"type_of":"article","id":165038,"title":"Learn git-grep to boost your command line search!","description":"git-grep searching","cover_image":null,"published":true,"published_at":"2019-09-05T12:46:12.326Z","tag_list":["git","grep","gitgrep","commandline"],"slug":"learn-git-grep-to-boost-your-command-line-search-jh7","path":"/iggredible/learn-git-grep-to-boost-your-command-line-search-jh7","url":"https://dev.to/iggredible/learn-git-grep-to-boost-your-command-line-search-jh7","canonical_url":"https://dev.to/iggredible/learn-git-grep-to-boost-your-command-line-search-jh7","comments_count":2,"positive_reactions_count":12,"page_views_count":114,"published_timestamp":"2019-09-05T12:46:12Z","body_markdown":"---\ntitle: Learn git-grep to boost your command line search!\npublished: true\ndescription: git-grep searching\ntags: git, grep, git-grep, command-line\n---\n\nWhen searching for contents inside files from command-line, we probably think of `find` and `grep`, but how many of us have heard about `git grep`?\n\nWhen searching inside your work tree, I found it more convenient than find/ grep. Here is how you can get started with git-grep today!\n\n# Things to know\n\nGit grep searches inside project with git. The only requirement is the project need to be tracked (hint: `git add .`). It will work without having to commit it.\n\n# Let's git greppin'\n\nThe pattern is very simple. Do `git grep {pattern}` anywhere inside your project directory.\n\n- To search for \"foo\":\n\n```\ngit grep foo\n```\n\nHere are other useful variants:\n\n- Search with line number\n\n```\ngit grep -n foo\n```\n\n- Returning only file name:\n\n```\ngit grep -l foo\n```\n\n- It is regex-compatible.\n\n```\ngit grep \"f[^\\s]*\\s\"\n```\n\n- To tell how many match in each file:\n\n```\ngit grep -c foo\n```\n\n- To only look under certain file extension (ignore matches from other files)\n\n```\ngit grep foo *.js\n```\n\n# and / or\n\n- To search for \"foo\" *or* \"bar\", we can do:\n\n```\ngit grep -e foo -e bar\n```\n\n- To search for a file containing \"foo\" *and* \"bar\" and they are *on the same line*:\n\n```\ngit grep -e foo --and -e bar\n```\n\nTo search for a file containing \"foo\" *and* \"bar\", not necessarily on the same line:\n\n```\ngit grep --all-match -e foo -e bar\n```\n\n\nThere are more (check `man git-grep`, but above are the ones I find useful).\n\n# Getting fancy: search within and between commits\n\nThe real power of git grep is its ability to search inside ANY commit we want.\n\nHere are the two that I found very useful:\n\n- Search inside specific commit\n\nThere are two ways to do it: reference it relative to HEAD and reference its SHA.\n\n```\ngit grep \"foo\" HEAD~1 // search ONLY in one commit before current head\ngit grep \"foo\" a1b2 // search ONLY in commit a1b2\n```\n\n- Search inside multiple commits\n\nIt also accepts multiple commit references.\n\n```\ngit grep \"foo\" HEAD HEAD~1 HEAD~7 // search in current head, previous head, and 7th from head.\ngit grep \"foo\" a1b2 HEAD~5 // search inside a1b2 SHA and 5th from head\n```\n\n- Search everything between 2 commits\n\nThis uses `git rev-list` command. Here are some quick refreshers:\n\n```\ngit rev-list HEAD~3..HEAD // Returns all commits between HEAD~3 and HEAD.\ngit rev-list --all // Returns ALL Commits from the dawn of time to present day.\n```\n\nCombining rev-list with git-grep, we can do:\n\n- Search for all occurrences of \"foo\" between HEAD~3 and HEAD\n```\ngit grep foo $(git rev-list HEAD~3..HEAD)\n```\n\n- Search for ALL occurrences of \"foo\" from the very beginning to current.\n\n```\ngit grep foo $(git rev-list --all)\n```\n\nOf course, we can put together everything we learned. This returns filename(s) from every single commit we have that contain, in each file, \"bar\" and anything that matches `f[^\\s]*\\s` pattern.\n\n```\ngit grep --all-match -l -e \"f[^\\s]*\\s\" -e bar $(git rev-list --all)\n```\n\n\nThat's it! I find git grep more convenient than traditional grep or find when I need to search file contents inside working tree. Of course, find/grep have their own usage that git grep can't do, but that's for another time. \n\n# Resources\n\n- [git grep](https://remarkablemark.org/blog/2017/05/07/git-grep/)\n- [git-grep doc](https://git-scm.com/docs/git-grep)\n- [Search git repo like a ninja](http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/)\n- [fun with git grep](https://gitster.livejournal.com/27674.html)\n\n\nHappy hacking!","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"vue-setting-up-vuepress-with-tailwindcss-2ooi":{"type_of":"article","id":164248,"title":"VUE: Setting up vuepress with tailwindcss","description":"setup vuepress with tailwindcss","cover_image":null,"published":true,"published_at":"2019-08-31T17:37:38.281Z","tag_list":["vuepress","tailwindcss","blog","css"],"slug":"vue-setting-up-vuepress-with-tailwindcss-2ooi","path":"/iggredible/vue-setting-up-vuepress-with-tailwindcss-2ooi","url":"https://dev.to/iggredible/vue-setting-up-vuepress-with-tailwindcss-2ooi","canonical_url":"https://dev.to/iggredible/vue-setting-up-vuepress-with-tailwindcss-2ooi","comments_count":0,"positive_reactions_count":4,"page_views_count":249,"published_timestamp":"2019-08-31T17:37:38Z","body_markdown":"---\ntitle: VUE: Setting up vuepress with tailwindcss\npublished: true\ndescription: setup vuepress with tailwindcss\ntags: vuepress, tailwindcss, blog, css\n---\n\n\nI have been looking for a simple Vue blog engine and decided to use [vuepress](https://vuepress.vuejs.org/). I also have been wanting to learn about [tailwindcss](https://tailwindcss.com/). Why not use them together so I can learn *both* Vue framework and tailwindcss? That way I can kill two birds with one stone _(or in Chuck Norris's world, kill two stones with one bird)_.\n\n![chuck norris approves](https://media.giphy.com/media/SfCKK2pwXjIgo/giphy.gif)\n\nThere are several guides ([here](https://www.amie-chen.com/blog/20190211-build-a-site-with-vuepress-part2.html) and [here](https://dev.to/vuevixens/build-a-beautiful-website-with-vuepress-and-tailwindcss--3a03)) on vuepress + tailwindcss integration. They are very excellent guides - but it looks like these guides were written prior to tailwind v1.0.0 release and I could not get them to run ([major changes](https://tailwindcss.com/docs/upgrading-to-v1/) were implemented between v0.x to v1.0). \n\nI decided to write this article for users using recent tailwindcss v1.+ and vuepress v1.+ (_I am using vuepress v1.0.3 and tailwindcss v1.1.2 at the time of this writing)_.\n\n\n**The repo for this article can be found [here](https://github.com/iggredible/vuepress-tailwindcss).**\n\n# Setting up Vuepress\n\nEnsure vuepress is installed in machine. It will help in the future to save it globally.\n\n```\nnpm i -g vuepress\n```\n\nCreate your directory. I called mine `tailwind-press`.\n\n```\nmkdir tailwind-press && cd $_\n```\n\nStart npm project. I used `-y` to skip questions.\n\n```\nnpm init -y\n```\n\nInstall vuepress dependency.\n\n```\nnpm i --save vuepress\n```\n\nPer [vuepress site](https://vuepress.vuejs.org/guide/basic-config.html#config-file), it is recommended to due customization inside `/docs` folder with `/.vuepress` directory and `readme.md`, so let's do that.\n\n``` \nmkdir -p docs/.vuepress\nmkdir docs/blogs/\ntouch docs/readme.md docs\ntouch docs/blogs/blog1.md docs/blogs/blog2.md\n```\n\nFill blogs/blog1.md, blogs/blog2.md, and readme.md with some content.\n\n```\n// readme.md\n# tailwind-press\nHello!\n\n// blogs/blog1.md\n# Doc1\ndoc1 test\n\n// blogs/blog2.md\n# Doc2\ndoc2 test\n```\n\nYour project should look like this now:\n\n```\n.\n├─ docs\n│  ├─ readme.md\n│  ├─ blogs\n│  │  ├─ blog1.md\n│  │  └─ blog2.md\n│  └─ .vuepress\n│     └─ config.js\n└─ package.json\n```\n\nTest vuepress by running: \n\n```\nvuepress dev docs\n```\n\nYou should have a basic vuepress running at 8080. You can check out blog1 at http://localhost:8080/blogs/blog1.html.\n\nSweetness! Part one is done. Time to customize it by applying our own theme.\n\n# Overwriting default theme\n\nAdd `config.js` inside `docs/.vuepress/` and put the following. This will add \"blogs\" nav with links to blog1 and blog2.\n\n```\nmodule.exports = {\n  title: \"Hello Tailwind-Press!\",\n  description: \"Blog v0.0.1\",\n  themeConfig: {\n    nav: [\n      {\n        text: \"blogs\",\n        items: [\n          { text: \"blog1\", link: \"/blogs/blog1.md\" },\n          { text: \"blog2\", link: \"/blogs/blog2.md\" }\n        ]\n      }\n    ]\n  }\n};\n```\n\nNext is an important part of vuepress custom theme: to overwrite vuepress's default theme, you need to add `/theme/Layout.vue` in `/.vuepress` directory. Vuepress will _automagically_ replace default theme to yours. Let's create `/theme/Layout.vue` inside `/.vuepress`. Your doc structure should look like the following:\n\n```\n.\n├─ docs\n│  ├─ readme.md\n│  ├─ blogs\n│  └─ .vuepress\n│     └─ config.js\n│     └─ theme\n│        └─ Layout.vue\n└─ package.json\n```\n\nPut a basic Vue boilerplate inside Layout.vue:\n\n```\n<template>\n  <div>\n    <h1>{{ $site.title }}</h1> \n    <div>Your blog goes here</div>\n  </div>\n</template>\n\n<script></script>\n\n<style></style>\n```\n\nRestart the server. Default theme should be overwritten now. Awesomeness!\n\n# Adding tailwindcss\n\nOur last step is to add tailwindcss. Many steps on this article is taken from the installation steps provided by [tailwind](https://tailwindcss.com/docs/installation).\n\nNpm install `tailwindcss` and `autoprefixer`.\n\n```\nnpm i --save tailwindcss autoprefixer\n```\n\nThen create config file for tailwind by running:\n \n```\nnpx tailwind init\n```\n\nWe now have tailwind.config.js at root. Inside that file, you'll see something like this:\n\n```\nmodule.exports = {\n  theme: {\n    extend: {}\n  },\n  variants: {},\n  plugins: []\n}\n\n```\n\nGo back to docs/.vuepress/config.js, add postcss config:\n\n```\nmodule.exports = {\n  title: \"Hello Tailwind-Press!\",\n  description: \"Blog v0.0.1\",\n  themeConfig: {\n    nav: [\n      {\n        text: \"blogs\",\n        items: [\n          { text: \"blog1\", link: \"/blogs/blog1.md\" },\n          { text: \"blog2\", link: \"/blogs/blog2.md\" }\n        ]\n      }\n    ]\n  },\n  postcss: {\n    plugins: [\n      require(\"autoprefixer\"),\n      require(\"tailwindcss\")(\"./tailwind.config.js\")\n    ]\n  }\n};\n```\n\nNext time server is run, it will run postcss and it will use both autoprefixer and tailwindcss plugins. Right now we haven't had any tailwindcss defined yet. Let's do that now.\n\nInside docs/.vuepress/theme, create a new css (styl) directory and file. I called the dir \"styles\" and the file \"style.styl'. You can give them any name you want (mine is at `docs/.vuepress/theme/styles/style.styl`. _Most/ all tutorials I've seen use .styl instead of .css. Per [vuepress doc](https://vuepress.vuejs.org/default-theme-config/#simple-css-override), it looks like you can use .css, but they use stylus, so that's what I am going with. I haven't tried it with .css._)\n\nInsert the following inside style.styl:\n\n```\n@tailwind base;\n\n@tailwind components;\n\n@tailwind utilities;\n\n```\n\nGreat. Our tailwindcss is ready to go. We just need to import it. Inside Layout.vue, add:\n\n```\n// Layout.vue\n\n...\n\n<style lang=\"stylus\">\n  @import './styles/style.styl';\n</style>\n```\n\nWe haven't mentioned any tailwindcss classes yet. Let's style it up a bit more (_btw, the snippet is mostly taken from [tailwindcss site](https://tailwindcss.com/components/navigation/#responsive-header)_).\n\n```\n// Layout.vue\n\n<template>\n<nav class=\"flex items-center justify-between flex-wrap bg-blue-500 p-6\">\n  <div class=\"flex items-center flex-shrink-0 text-white mr-6\">\n    <svg class=\"fill-current h-8 w-8 mr-2\" width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\"/></svg>\n    <span class=\"font-semibold text-xl tracking-tight\">{{ $site.title }}</span>\n  </div>\n</nav>\n</template>\n\n<script></script>\n\n<style lang=\"stylus\">\n\t@import './styles/style.styl';\n</style>\n```\n\nYou should see tailwindcss styling. That's it! Now you are free to unleash the power of the dark side... I mean creative side.\n\n![vader impressed](https://media.giphy.com/media/nlWGe7Q64zwQ0/giphy.gif)\n\nQuestions are always welcome. Happy hacking!\n\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"vim-quick-tips-to-do-search-better-4m3p":{"type_of":"article","id":159596,"title":"VIM: quick tips to do search better","description":"vim searching tips","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--G7AOJrN0--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/3715kym7oqoe9f00x716.png","published":true,"published_at":"2019-08-28T11:56:11.871Z","tag_list":["vim","search","regex","patterns"],"slug":"vim-quick-tips-to-do-search-better-4m3p","path":"/iggredible/vim-quick-tips-to-do-search-better-4m3p","url":"https://dev.to/iggredible/vim-quick-tips-to-do-search-better-4m3p","canonical_url":"https://dev.to/iggredible/vim-quick-tips-to-do-search-better-4m3p","comments_count":1,"positive_reactions_count":9,"page_views_count":172,"published_timestamp":"2019-08-28T11:56:11Z","body_markdown":"---\ntitle: VIM: quick tips to do search better\npublished: true\ndescription: vim searching tips\ntags: vim, search, regex, patterns\ncover_image: https://thepracticaldev.s3.amazonaws.com/i/3715kym7oqoe9f00x716.png\n---\n\nBeing able to search for complicated patterns quickly is an indispensable skill as a developer. I want to share some tips to use Vim's search to speed up your development. When used correctly, search can be a powerful navigation tool in Vim.\n\nI hope you'll learn one or two things!\n\n![happy fast typing](https://media.giphy.com/media/Wsju5zAb5kcOfxJV9i/giphy.gif)\n\n# Searching in Vim\n\nYou can search using `/{your-search-pattern}`. Go backwards with `?{your-search-pattern}`. To search for all `foo` in a file, do `/foo`.\n\n# Finding next/ previous instance\n\nOnce you enter your search pattern `/foo`, pressing Enter (`<CR>`) will put you into what I  call \"search mode\". You can find next instance of \"foo\" by `n` and previous instance of \"foo\" by `N`.\n\nOne super convenient thing about `n` is that you can do it **anytime** even when you are not in search mode anymore, invoke that search again by typing `n`. Try it.\n\nI think this is a powerful navigation tool in vim because you can quickly go up/down file with precision.\n\n# Turn on ignorecase and smartcase\n\nI find it easier to search in case insensitive mode. To do that, in my `vimrc` I have `set ignorecase`. With ignorecase, typing `/foo` will match \"foo\", \"Foo\", \"FOO\", etc.\n\nI also have smartcase on (`set smartcase`). These two usually [go together](https://stackoverflow.com/questions/2287440/how-to-do-case-insensitive-search-in-vim).\n\nWhat ignore + smartcase combo do, is that it will do case *insensitive* search only if we use all lowercase search. It will do case *sensitive* search if we use at least one uppercase.\n\nFor example:\n\n```\nfoo\nFoo\nFoO\n```\n\nSearching `/foo` will match all of the above. Searching `/Foo` will match only \"Foo\". Searching `/fOo` will find no match. \n\nThe former is case insensitive, the last two were case sensitive. A little weird, but I find it delightfully intuitive.\n\n# Disabling highlight\n\nAfter finding matches, sometimes I found the highlighted matches distracting. You can turn it off with `:noh` (no highlight). Because I use this often, I mapped `:noh` to `<esc><esc>`. \n\nHere is what I have in `.vimrc`:\n\n```\nnnoremap <esc><esc> :noh<return><esc>\n```\n\n# Auto complete searching\n\nVim is smart enough to autocomplete your search keyword. While you are searching for \"something\", you can autocomplete with `/somet<C-r><C-w>` gives `/something`.\n\nIt is not foolproof, but I found 90% of the time it gives me the word I was thinking of.\n\n\n# Repeating last search\n\nTo repeat last search, you can do either `/` or `//`. \n\n\n# Finding word frequency\n\nTo see how many \"foo\" occurs in a file, you can type `:%s/foo//gn`.\n\nIt uses substitute (`:s`) command, for the whole file (`%`) but we suppresses it (`n`) (I think you can just use `:%s/{word}//n` without g.\n\nWe can combine this with `//`. If we *had just searched* for foo (`/foo`) and we wanted to find how many \"foo\" in current file, we can do `:%s///gn`.\n\n# Quickly find all word instances under cursor\n\nThere are two ways to find a word under cursor:\n1. To find within word boundary, use `*` or `#`\n2. To find without word boundary, use `g*` or `g#`.\n\nI didn't get word boundaries at first, so let me explain:\n\n```\n[H]ello // [H] means cursor is on H\nHelloWorld\nHello\nHelloworld\n```\nIf we use `*`, we will see\n```\n[Hello] //highlights\nHelloWorld\n[Hello] //highlights\nHelloworld\n```\n\nIf we use `g*`, we will see\n\n```\n[Hello] //highlights\n[Hello]World //highlights\n[Hello] //highlights\n[Hello]world //highlights\n```\n\nUse `n` or `N` to jump to next/ previous instance.\n\nThat's all for now. I hope you guys find this helpful. Please feel free to share other searching tips - I am curious to hear from you guys.\n\nHappy hacking!!\n\n![wayne's world thumbs up](https://media.giphy.com/media/imRu0Oqh6kzdK/giphy.gif)","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"vim-use-different-registers-for-faster-workflow-2ekg":{"type_of":"article","id":158161,"title":"VIM: use different registers for faster workflow","description":"vim registers","cover_image":null,"published":true,"published_at":"2019-08-21T12:27:14.969Z","tag_list":["vim","registers","copy","paste"],"slug":"vim-use-different-registers-for-faster-workflow-2ekg","path":"/iggredible/vim-use-different-registers-for-faster-workflow-2ekg","url":"https://dev.to/iggredible/vim-use-different-registers-for-faster-workflow-2ekg","canonical_url":"https://dev.to/iggredible/vim-use-different-registers-for-faster-workflow-2ekg","comments_count":4,"positive_reactions_count":12,"page_views_count":166,"published_timestamp":"2019-08-21T12:27:14Z","body_markdown":"---\ntitle: VIM: use different registers for faster workflow\npublished: true\ndescription: vim registers\ntags: vim, registers, copy, paste\n---\n\n\nIn vim, we can paste (`p`/`P`) after deleting (`d{something}`) or yanking (`y{something}`). Pasting uses Vim registers. However, do you know that there are 10 different registers in Vim? Check out `:h registers.\n\n*I am using [neovim](https://neovim.io/) v0.3.4. Some of these might be different if you use regular vim, but the gist should be the same and most people should be able to follow along.*\n\nIn this article I will go over 3 of them because I believe these are the more useful ones (plus it's easier to learn 3 things than 10 things in one sitting). In the future, I will cover more of these registers. \n\n\n# The ten types of register\n\nAccording to Vim, these are the 10 registers. The three we will cover here are shown in bold.\n\n![boldone](https://media.giphy.com/media/27qP1RcoyDi1v9kRYZ/giphy.gif)\n\n1. **The unnamed register \"\"**\n2. **10 numbered registers \"0 to \"9**\n3. The small delete register \"-\n4. **26 named registers \"a to \"z or \"A to \"Z**\n5. three read-only registers \":, \"., \"%\n6. alternate buffer register \"#\n7. the expression register \"=\n8. The selection registers \"* and \"+\n9. The black hole register \"_\n10. Last search pattern register \"/\n\n\n# Some useful operators to know before we start\n\nSome operators saves the values to registers:\n\n`s, x, y{something}, c{something}, d{something}`\n\nI use the mnemonic \"sexy cd\" - excuse my language 😳 - to remember them.\n\n# Register 1: Unnamed registers (\"\")\n\nWe use them all the time. When we yank/change/delete anything we are storing them to the unnamed register (`\"\"`).\n\nWe can use unnamed register by `p` or `\"\"p`. \n\nIf we do another yank/change/delete, it will replace the previous unnamed register. It is like your computer's standard copy/paste.\n\n# Register 2: Numbered Register (0-9)\n\nThere are 2 different numbered registers: register 0 (yank register) and registers 1-9 (numbered register)\n\n## Register 2a: Yank register (0)\n\nWhen you yank something (say you just yanked an entire line `yy`), it gets saved in **two** places:\n\n1. unnamed register (you can `p` after you `yy`)\n2. yank register (`\"0p`)\n\nYank register only gets replaced when you yank something else second time. It **won't** get replaced if you run s/x/c/d.\n\nYank register also won't fill out numbered registers 1-9.\n\nThis is useful when we yank an important line, that yanked line is always available even after we perform several deletions so you can call it anytime.\n\n## Register 2b: Numbered Register (1-9)\n\nNumbered registers store the latest 9 deletions/ changes (s/x/c/d) automatically.\n\nLet's try it. Copy/paste the following: w\n\n1. one\n2. two\n3. three\n4. four\n5. five // cursor here\n\nWith the cursor on the last line (\"5. five\"), let's do 5 `dd`.\n\nCool. 1-5 should be gone and saved to registers 1-5. If we want to paste three, we can just do `\"3p` (read: get value from register 3 and paste it)\n\n*Note that this register stores deleted/ changed texts **at least one line or larger**. So deleting a line (`dd`) gets stored in numbered register but deleting a word (`diw` or `de`) won't. Anything smaller gets stored in small delete (`-`) register*\n\n## Register 3: Named register (a-z, A-Z)\n\nNamed register allows us to save our deleted/ changed/ yanked texts into register a through z. You can do it by `\"{letter} {delete/yank/change action}`.\n\nFor example, if I want to delete the entire line and save that into register `a`, I can do `\"add` (read: save to register a all deleted line).\n\nTo get that value back, we can do `\"ap` (read: get value from register a and paste it).\n\nIf we want to append to existing register, we do `\"{uppercase letter} {delete/yank/change action}`. The key is to use the uppercase letter of the letter we want to append. So to add into our register a, we can do `\"Add` and use `\"ap` to get the value back.\n\n# Conclusions\n\nWe have just learned 3 Vim registers. I find that I used these 3 more than anything else. Start using them into your daily workflow today. I personally find yank registers and named registers very useful. \n\nThat's all folks. Vim till you win!\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"javascript-start-using-memoization-to-reduce-computing-time-5cjk":{"type_of":"article","id":156316,"title":"JAVASCRIPT: Start using memoization to reduce computing time","description":"introduction to javascript memoization","cover_image":null,"published":true,"published_at":"2019-08-16T12:19:15.974Z","tag_list":["javascript","memoization","performance","cache"],"slug":"javascript-start-using-memoization-to-reduce-computing-time-5cjk","path":"/iggredible/javascript-start-using-memoization-to-reduce-computing-time-5cjk","url":"https://dev.to/iggredible/javascript-start-using-memoization-to-reduce-computing-time-5cjk","canonical_url":"https://dev.to/iggredible/javascript-start-using-memoization-to-reduce-computing-time-5cjk","comments_count":5,"positive_reactions_count":41,"page_views_count":558,"published_timestamp":"2019-08-16T12:19:15Z","body_markdown":"---\ntitle: JAVASCRIPT: Start using memoization to reduce computing time\npublished: true\ndescription: introduction to javascript memoization\ntags: javascript, memoization, performance, cache\n---\n\n\nOne classic CS question is to create [Fibonacci]((https://www.mathsisfun.com/numbers/fibonacci-sequence.html)) sequence. One of the solutions is a recursive function and it looks something like this:\n\n```\nfunction fib(n) {\n  if (n === 0 || n === 1)\n    return n;\n  else\n    return fib(n - 1) + fib(n - 2);\n}\n```\n\nA major problem with recursive fibonacci function above is that it is an expensive function. It calls itself too many times. Calling fib(40) took about 30 seconds on my poor 2015 Macbook air (it calls itself _102,334,155_ times), fib(45) almost 5 minutes (calls itself _1,134,903,170_ times - a **billion** time).\n\nGood luck calling fib(100). \n\n![tearful cry](https://media.giphy.com/media/qQdL532ZANbjy/giphy.gif)\n\nIs there anything we can do to shorten an expensive function like this?\n\n# Enter memoization\n\n[Memoization](https://en.wikipedia.org/wiki/Memoization) (rhymes with memorization) is a technique in CS to save previous result into a cache so when the function is called again with same argument, it would just return value from the cache and execute the function again. It is useful for expensive functions like fibonacci.\n\n# How do we use memoization on fibonacci?\n\nWe can use:\n\n```\nconst fib = (function() {\n  const cache = {};\n\n  function f(n) {\n    let value;\n\n    if (n in cache) {\n      value = cache[n];\n    } else {\n      if (n === 0 || n === 1)\n        value = n;\n      else\n        value = f(n - 1) + f(n - 2);\n\n        cache[n] = value;\n    }\n\n    return value;\n  }\n\n  return f;\n})();\n```\n(Source: [here](https://www.sitepoint.com/implementing-memoization-in-javascript/). All credit for above goes to author).\n\nTry the function above and run fib(40), fib(50), and even fib(100). You'll feel the difference.\n\n# How does memoization works?\n\nIt stores values on JS object (`const cache = {};`) so if the same value is called again, it will fetch the value from `cache` instead of executing the function. \n\n\nLet's say we want to call fib(5). When fib(5) is called the first time, since cache is empty and it could not find 5 in cache (`if (n in cache)` is falsy), it executes fibonacci logic (`value = f(n - 1) + f(n - 2);`) and then saves the result to cache  (`cache[n] = value;`). Now we have a cache for `n = 5` - something like this: `{5: 5}` (btw, value of fib(5) is 5).\n\nThe next time we call fib(5) again, it finds (`{5: 5}`) in cache. Instead of executing fib(5) again, it simply returns the value from cache lookup `value = cache[n]; ... return value;`. Since our fibonacci is recursive, when we call for fib(5), it automatically fills up the cache with values up to 5. Calling fib(5) creates cache for fib(4), fib(3), etc.\n\nAnother example is, say we have just called fib(49) and we want to call fib(50) next. Before we call fib(50), inside our cache, we would have cache values like this:\n\n```\n{\n  0: 0,\n  1: 1,\n  2: 1,\n  3: 2,\n  ...\n  48: 4807526976,\n  49: 7778742049\n}\n```\n\nWe already have values from 0 to 49! All we need to do is to call `value = f(n - 1) + f(n - 2);` - aka fib(49) + fib(48), which we already have stored in cache! This is how memoized fib(50) returns the result almost instantaneously compared to its non-memoized version.\n\n# Sweet! I am going to memoize every function in sight!\n\nUnfortunately, not everything is memoizable. We can only memoize pure functions.\n\nTo be a pure function, it must:\n1. Have return value\n2. Does not depend on arguments other than its own argument\n3. Does not mutate values outside of its scope\n\nPure function is out of this article's scope, but check this [short article on pure function](https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3?gi=56dfa64da56e).\n\n# Other notes\n\nMemoization is awesome. But let's not overuse it. Some things to consider when deciding when to use memoization:\n\n1. Not all functions are memoizable. Only pure functions are.\n2. Memoizations have high overhead. Remember, we have to create a cache to store many possible arguments for every memoized function.\n3. Memoization is best used on expensive function. Regex calls and recursions are some of them that came into my mind.\n\n# That's nice. But we probably would never use Fibonacci in real life. Is there an example of real life use of memoization?\n\nYup. [VueJS](https://vuejs.org/) utilizes memoization. `cached(fn)` is a memoization wrapper.\n\n```\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n```\n\nAnd it is being used several times:\n\n```\nconst camelizeRE = /-(\\w)/g\nexport const camelize = cached((str: string): string => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')\n})\n\nexport const capitalize = cached((str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n})\n\nconst hyphenateRE = /\\B([A-Z])/g\nexport const hyphenate = cached((str: string): string => {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n})\n```\n\nYou can find these function [here](https://github.com/vuejs/vue/blob/dev/src/shared/util.js). (Vue 2.5.0 at the moment of this writing. It might change in the future but you could always go back to previous version).\n\nHappy hacking!\n\n# Resources\n\nMore readings on memoziation:\n- [Understanding JavaScript Memoization In 3 Minutes](https://codeburst.io/understanding-memoization-in-3-minutes-2e58daf33a19)\n- [JavaScript Function Memoization\n](http://inlehmansterms.net/2015/03/01/javascript-memoization/)\n- [Implementing Memoization in Javascript](https://www.sitepoint.com/implementing-memoization-in-javascript/)\n\nOn pure function:\n- [Understanding Javascript Mutation and Pure Functions\n](https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3)","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"vim-do-you-know-that-you-can-execute-normal-mode-command-while-in-insert-mode-1ipb":{"type_of":"article","id":155284,"title":"VIM: do you know that you can execute normal mode command while in insert mode?","description":"vim insert normal mode","cover_image":null,"published":true,"published_at":"2019-08-12T12:09:12.920Z","tag_list":["vim","productivity","insertmode","discuss"],"slug":"vim-do-you-know-that-you-can-execute-normal-mode-command-while-in-insert-mode-1ipb","path":"/iggredible/vim-do-you-know-that-you-can-execute-normal-mode-command-while-in-insert-mode-1ipb","url":"https://dev.to/iggredible/vim-do-you-know-that-you-can-execute-normal-mode-command-while-in-insert-mode-1ipb","canonical_url":"https://dev.to/iggredible/vim-do-you-know-that-you-can-execute-normal-mode-command-while-in-insert-mode-1ipb","comments_count":16,"positive_reactions_count":85,"page_views_count":8710,"published_timestamp":"2019-08-12T12:09:12Z","body_markdown":"---\ntitle: VIM: do you know that you can execute normal mode command while in insert mode?\npublished: true\ndescription: vim insert normal mode\ntags: vim, productivity, insert-mode, discuss\n---\n\nVim has been my go-to editor for the last 1.5 years, yet I am still learning something new. Recently I learned about \"Insert Normal\" mode and I'd like to share how you can use this mode to code faster in vim!\n\n![typing-300wpm](https://thepracticaldev.s3.amazonaws.com/i/bz9018prk4ltg68i90tu.gif)\n\nFeedbacks are highly appreciated. If you think of more ways to save keystrokes using this mode, feel free to share in the comments!\n\n# What the heck is insert-normal mode?\n\nGlad you asked! \n\nIt is a mode in insert mode where you can execute normal mode commands. Instead of switching modes from `insert` -> `normal` -> (do normal mode stuff) -> `insert`, you can execute normal code commands while remaining in insert mode.\n\n_All you need to do is to press **`C-o`** while in insert mode._\n\nHow can you tell that you're in insert-normal mode? In insert mode, you can see `-- INSERT --` indicator on bottom left. If we press `C-o`, it will change into `-- (insert) --`.\n\n**Important**: you can only execute one command in this mode. After executing a normal mode command, you're back to insert mode.\n\nEven with this limitation, this is still a powerful feature. Let's give some examples what we can do with insert-normal mode.\n\n# Example 1: Navigating while remaining in insert mode\n\nLet's say while typing, you wanted to add a word in the beginning of current line. Do `C-o 0` to jump to the beginning of the line, add the word, then jump back with to the end with `C-o $`. \n\nMaybe you are adding something after comma in the same line, just do `C-o T ,` and you'll jump right after the comma. `C-o $` to jump back to the end. \n\nYou can always mix it with other vim motions. I find `H, M, L, [], ()` useful for quick navigation.\n\n# Example 2: Centering screen\n\nI am typing this article in vim. As I am typing this, I am at the bottom of the screen. I can center my current position by doing `C-o zz`.\n\n# Example 3: Repeating characters\n\nSay I want to type `*` 100 times. I can just type `C-o 100 i * <esc>` (the downside is, this will force you to leave insert mode).\n\n# Example 4: Deleting faster\n\nIf I wanted to delete a block of text from my current position to an anchor, say a comma, I can just do `C-o d T ,` \n\n# What's next?\n\nThese are some ways we can take advantage of insert-normal mode. \n\nI am interested to learn how other devs can take advantage of insert-normal mode. _What other ways do you guys think insert-normal mode can be used?_\n\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"},"flare_tag":{"name":"discuss","bg_color_hex":"#000000","text_color_hex":"#FFFFFF"}},"vim-use-dot-command-to-save-keystrokes-1c96":{"type_of":"article","id":154192,"title":"VIM: use dot command to do repetitive tasks faster","description":"vim dot command tips","cover_image":null,"published":true,"published_at":"2019-08-10T14:53:21.555Z","tag_list":["vim","editor","productivity","discuss"],"slug":"vim-use-dot-command-to-save-keystrokes-1c96","path":"/iggredible/vim-use-dot-command-to-save-keystrokes-1c96","url":"https://dev.to/iggredible/vim-use-dot-command-to-save-keystrokes-1c96","canonical_url":"https://dev.to/iggredible/vim-use-dot-command-to-save-keystrokes-1c96","comments_count":7,"positive_reactions_count":35,"page_views_count":790,"published_timestamp":"2019-08-10T14:53:21Z","body_markdown":"---\ntitle: VIM: use dot command to do repetitive tasks faster\npublished: true\ndescription: vim dot command tips\ntags: vim, editor, productivity, discuss\n---\n\nVim has been my go-to editor for the last 1.5 years, yet I am still learning something new. Recently I sought to learn about the vim's dot (`.`) command. \n\nDot command is like a mini macro. Is repeats the last change made. If used correctly, it can save us time doing repetitive tasks. \n\nI am also curious how you guys use dot command - feel free to comment below!\n\n# How does it work?\n\nIf you see the help section in vim (`:h .`), you'll see:\n\n> Repeat last change, with count replaced with [count]...\n\nI immediately thought, \"what does vim mean by 'change'?\"\n\nAfter some reading and experimenting, I concluded change means any act of updating, adding, or subtracting the content of a file. Moving around does __not__ count as a change. Let's see if that is true by some application.\n\n## Example 1: Adding ; to the end of each line\n\nHere is an example ([source](https://www.reddit.com/r/ProgrammerHumor/comments/7uyafj/roses_are_red_violets_are_blue/)). Let's say we want to add `;` at the end of each line, this can be done with the help of `.`:\n\n```\nRoses are Red\nViolets are Blue\nUnexpected '{'\nOn line 32\n```\n\nAssume we are starting on top left where 'R' is. We start with `A ; <esc> j`. \n1. `A` jumps to end of line and enters insert mode. \n2. `;` adds `\";\"`, back to normal mode, then go down. \n\nCool, that whole (`A ; <esc> j`) was one change, right? No. If we do `. . .`, we end up with\n\n```\nRoses are Red;\nViolets are Blue;;; <-- what happened?\nUnexpected '{'\nOn line 32\n```\nThis is because vim does __not__ count `j` as part of change. Change excludes motions. In this case, vim consider a change to be `A ; <esc>`. We need to do `A ; <esc> j . j . j .`. Dot, down, dot, down, dot, down.\n\n\n## Example 2: Deleting specific word, but not all\n\nFor example, suppose our poem says this instead:\n\n```\nRoses are Red Blue\nViolets are Blue\nUnexpected Blue '{'\nOn line Blue 32\n```\n\nWe need to delete Blues except the one on line two. We can very quickly do it using dot command. \n\n\n`/ Blue c i w <backspace> <esc>` deletes first Blue. Then `n n . n .`\n\nThis time, our change consist of:\n1. Delete the entire word Blue and entering insert mode (`c i w`)\n2. Backspace while in insert mode\n3. Exit\n\nI am starting to see a pattern here. `/ Blue` and `n` are not considered change by vim, but `c i w <Backspace> <esc>` does. \n\nLet's do another example:\n\n## Example 3: Adding ( at the beginning on each line\n\nAnother one, suppose you have:\n\n```\nOne)\nTwo)\nThree)\n```\n\nWe are adding ( at the start of each word. You can do `I ( <esc>` to apply the change to the first, then `j . j .`. Change here is `I ( <esc>`.\n\n## Comparing what 'changed'\n\nLet's compare all of the repeatable changes from the past few examples:\n\n1. `A ; <esc>`\n2. `c i w <Backspace> <Esc>`\n3. `I ( <esc>`\n\nDo you see a pattern? They all _start_ with commands that put you into insert mode (c, A, and I are all command that results in entering Insert mode) and end with <esc> . \n\nAnother one I didn't mention was delete commands like `dd`. I can delete lines repeatedly by `dd . . . .`. Although dd does not enter insert mode, vim considers it as a change because it deletes an entire line. Remember, anything that adds, removes, or updates text is considered as change by vim. \n\n# Application\n\nAbove are some application of dot commands. It can save us a few keystrokes - a few keystrokes saved is time gained. Next time we are doing repetitive task, see if you can repeat it with the dot command.\n\nThanks for reading! I really appreciate you making it this far. Happy hacking!\n\n# Resources:\n\n- [Practical Vim](https://www.amazon.com/Practical-Vim-Thought-Pragmatic-Programmers/dp/1934356980)\n- [Why the dot (.) command is so useful in VIM?](https://stackoverflow.com/questions/7325052/why-the-dot-command-is-so-useful-in-vim)\n\n# Discuss\n\nI am interested to learn how other devs take advantage of the dot command. What other ways do you think dot commands can be used?\n\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"},"flare_tag":{"name":"discuss","bg_color_hex":"#000000","text_color_hex":"#FFFFFF"}},"start-using-promisify-to-avoid-js-callback-spaghetti-59mk":{"type_of":"article","id":151907,"title":"JAVASCRIPT: Start using Promisify to avoid JS callback spaghetti","description":"Use promisify to avoid JS callback spaghetti","cover_image":null,"published":true,"published_at":"2019-08-06T12:27:18.854Z","tag_list":["promisify","callback","javascript","asynchronous"],"slug":"start-using-promisify-to-avoid-js-callback-spaghetti-59mk","path":"/iggredible/start-using-promisify-to-avoid-js-callback-spaghetti-59mk","url":"https://dev.to/iggredible/start-using-promisify-to-avoid-js-callback-spaghetti-59mk","canonical_url":"https://dev.to/iggredible/start-using-promisify-to-avoid-js-callback-spaghetti-59mk","comments_count":0,"positive_reactions_count":5,"page_views_count":580,"published_timestamp":"2019-08-06T12:27:18Z","body_markdown":"---\ntitle: JAVASCRIPT: Start using Promisify to avoid JS callback spaghetti\npublished: true\ndescription: Use promisify to avoid JS callback spaghetti\ntags: promisify, callback, javascript, asynchronous\n---\n\nAsynchronous codes are common in JS programming, like fetching data from an endpoint and reading dir/files. Often they require us to pass a _callback_ function that will be executed when the action is completed.\n\n# The problem with callback async\n\nThe problem with callback async is that they can get messy.\n\nIf I want to read a file (using [fs.readFile](https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback)), I can do it like this:\n\n```\nfs.readFile('./file/location.md', 'utf-8', function(err, val){\n  if(err) throw new Error (\"Something terrible happened\")\n  console.log(\"Content: \", val)\n})\nconsole.log(\"Waiting...\")\n```\n\nYou'll notice `\"Waiting\"` is displayed before `\"Content\"`. This is because JS automatically moves __all__ async functions at the back of the line (regardless how \"fast\" they execute). \n\nNow this is a big deal if we need to use the result of that async function for our next action. If we need to use the result of our callback function, the following won't work:\n\n```\nlet pathToNextLocation; \nfs.readFile('./file/location1.md', 'utf-8', function(err, val){\n  if(err) throw new Error\n  pathToNextLocation = val; \n})\n\nconsole.log(pathToNextLocation); \n```\n\nWe will need to do this instead:\n\n```\nlet pathToNextLocation\nfs.readFile('./file/location1.md', 'utf-8', function(err, val){\n  if(err) throw new Error\n  pathToNextLocation = val; \n  fs.readFile(pathToNextLocation, 'utf-8', function(err, val) {\n    // do stuff!\n  })\n})\n```\n\nWhat if we need to execute four async functions in sequence? We would have to nest it four levels deep. This is one big spaghetti.\n\n![big spaghetti](https://media.giphy.com/media/r9jG5FH7chblC/giphy.gif)\n\n# Better way to handle async: Promises\n\nA better way to deal with async function is to use promises. Promises, like callbacks, are asynchronous. Unlike callbacks, they can be chained.\n\nPromise takes 2 arguments and we need to `resolve` it - think of it like Promise's own way to return value when it is done.\n\n```\nnew Promise((resolve, reject) =>\n  resolve('Hello promise')\n)\n.then(value => console.log(value))\n```\n\nThis `then` chain is really awesome, because now we can do something like this:\n\n```\nasyncReadFile('./file/to/location1.md', 'utf-8')\n.then(value => {\n  return anotherPromise\n})\n.then(value => {\n  return anotherPromise\n})\n.then(value => {\n  return yetAnotherPromise\n})\n// and so on\n```\n\nThis looks MUCH better than callback spaghetti. \n\n# Putting the two together: replace all callbacks with promises\n\nWe learned two things:\n1. Too many callbacks leads to spaghetti code\n2. Chained promises are easy to read\n\nHowever, callbacks functions are not the same thing as promises. `fs.readFile` do not return promises. We can't just use `then` chain on several `fs.readFile` together.\n\n> \"Hmm, I wonder if there is a way to convert them callbacks into promises so I can chain them and make them look pretty?\" - me thinking\n\nAbsolutely!! [Promisify](https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original) does JUST that.\n\nPromisify is part of util built into Node 8+. It accepts a function that accepts a callback function (wow, that's a mouthful). The resulting function is a function that returns a promise. Let's jump straight into it. It will make sense after we run it ourselves.\n\nLet's create several files in a directory that contains the name of other files to read. Then we will read the first file - see if we can make it to the last file.\n\n```\n// file1.md\nfile2.md\n\n// file2.md\nfile3.md\n\n// file3.md\nFinished!\n\n// reader.js\nconst fs = require(\"fs\");\nconst { promisify } = require(\"util\");\n\nconst promiseReadFile = promisify(fs.readFile);\n\npromiseReadFile(\"file1.md\", \"utf-8\")\n  .then(content => {\n    const nextFileToRead = content.trim();\n    return promiseReadFile(nextFileToRead, \"utf-8\");\n  })\n  .then(content => {\n    const nextFileToRead = content.trim();\n    return promiseReadFile(nextFileToRead, \"utf-8\");\n  })\n  .then(content => {\n    console.log(content.trim());\n  });\n```\n\nNow let's `node ./reader.js` and see what happens. You should see `\"Finished!\"` printed.\n\nSweet! Now that is one spaghetti I don't mind eating.\n\n![delicious spaghetti](https://media.giphy.com/media/3o72F2CaK3Hk53WxGg/giphy.gif)\n\nJavascript has another way to handle promises: [async/await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function).\n\nTo test your understanding, can you convert promisified code above from `then` into `async/await`?\n\nThanks for reading. Happy hackin'! Let me know if you have questions!\n\n# Resources\n\n1. [util promisify](https://2ality.com/2017/05/util-promisify.html)\n2. [node8 util promisify is so awesome](https://medium.com/greyatom/node8s-util-promisify-is-so-awesome-9819f1b56d18)\n3. [Promisification](https://javascript.info/promisify)\n4. [understanding nodes promisify and callbackify](https://medium.com/trabe/understanding-nodes-promisify-and-callbackify-d2b04efde0e0)\n5. [Promise docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n6. [callback functions in nodeJS](https://dev.to/martinnrdstrm/callback-functions-innodejs--2607)\n7. [Javascript and asynchronous magic](https://levelup.gitconnected.com/javascript-and-asynchronous-magic-bee537edc2da)\n8. [Is JavaScript Synchronous or Asynchronous? What the Hell is a Promise?](https://medium.com/better-programming/is-javascript-synchronous-or-asynchronous-what-the-hell-is-a-promise-7aa9dd8f3bfb)\n\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"path-command-line-101-1b30":{"type_of":"article","id":152298,"title":"The only two things you need to know about PATH command line","description":"Quick introduction on path","cover_image":null,"published":true,"published_at":"2019-08-05T11:46:13.136Z","tag_list":["path","commandline","basics","linux"],"slug":"path-command-line-101-1b30","path":"/iggredible/path-command-line-101-1b30","url":"https://dev.to/iggredible/path-command-line-101-1b30","canonical_url":"https://dev.to/iggredible/path-command-line-101-1b30","comments_count":0,"positive_reactions_count":6,"page_views_count":11,"published_timestamp":"2019-08-05T11:46:13Z","body_markdown":"---\ntitle: The only two things you need to know about PATH command line\npublished: true\ndescription: Quick introduction on path\ntags: path, command-line, basics, linux\n---\n\n> \"I was a bit challenged when I was younger to stay on the right path\" - Dwayne Johnson\n\n![dwayne](https://media.giphy.com/media/kNA1sKSqxgFDq/giphy.gif)\n\nSuch wisdom. Not all path leads to happiness. The wrong `PATH` will lead you to unhappiness. Here we will learn the right path and stay in it!\n\nThere are many things you can learn about path. I think the two important ones are:\n\n1. Finding your path  \n2. Updating your paths. \n\n\n# Finding your PATH\n\nIn mac, you can find path from command line by typing `echo $PATH`. Mine looks something like this:\n\n```\necho $PATH\n/Users/iggy/.nvm/versions/node/v10.15.1/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\nPath is colon (`:`) separated and it reads from left to right.\n\nFor example, if I execute `node`, my terminal would first search node _executable_ at (`/Users/iggy/.nvm/versions/node/v10.15.1/bin`), then (`/usr/local/bin`), etc. If node was not found anywhere, it will return ` command not found: node`.\n\nTo find which path node currently uses, run `which node`, in my case, I see:\n\n```\n/Users/iggy/.nvm/versions/node/v10.15.1/bin/node\n```\n\nNote the similarities between my one of my paths and node path:\n\n```\n#PATH\n/Users/iggy/.nvm/versions/node/v10.15.1/bin \n\n#node path\n/Users/iggy/.nvm/versions/node/v10.15.1/bin/node \n```\n\n# Updating your path\n\nYou can either _prepend_ or _append_ your path\n\n```\nPATH=/your/new/prepend/path:$PATH\nPATH=$PATH:/your/new/append/path\n```\n\nThis type of change is temporary. It will disappear when the terminal is closed. To make it permanent, update path inside `.bash_profile` or `.profile`\n\n```\nexport PATH=\"~/new/path:$PATH\"\n```\n\n# Application: let's hack a path!\n\nSuppose you are an evil person and wanted to modify the `node` command of your coworker so when they run `node`, they are running your script instead. All you need is to prepend your own path so when they run `node`, path will execute your node executable first. Here is how you can do it:\n\nCreate `/for-fun` dir, inside create a file named `node`. Make sure to add `#!/bin/bash` (shebang) on first line:\n\n```\n#!/bin/bash\necho \"ALL YOUR FILES ARE GONE *EVIL LAUGHS*\"\n```\n\nSave, then grant permission `chmod +x ./node`. Adding shebang and permission are required so they can run `node` directly instead of `./node`\n\nPrepend path:\n\n```\nPATH=/Users/iggy/for-fun:$PATH\n```\n\n(replace `Users/iggy/for-fun` with whatever path you used. You can use `pwd` if you're not sure where you're at)\n\nCheck your newly appended path (`echo $PATH`) to make sure our prepend path is the first path displayed. Check also your node path (`which node`) - you should see the updated path.\n\nCool! Next time someone runs `node`, they'll see:\n\n```\nnode\nALL YOUR FILES ARE GONE *EVIL LAUGHS*\n```\n\nThat's all folks.  Happy hacking!!\n\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"what-the-heck-are-cjs-amd-umd-and-esm-ikm":{"type_of":"article","id":142611,"title":"JAVASCRIPT: What the heck are CJS, AMD, UMD, and ESM?","description":"Differences between CJS, AMD, UMD, ESM","cover_image":null,"published":true,"published_at":"2019-07-22T12:36:29.245Z","tag_list":["javascript","modules","cjs","esm"],"slug":"what-the-heck-are-cjs-amd-umd-and-esm-ikm","path":"/iggredible/what-the-heck-are-cjs-amd-umd-and-esm-ikm","url":"https://dev.to/iggredible/what-the-heck-are-cjs-amd-umd-and-esm-ikm","canonical_url":"https://dev.to/iggredible/what-the-heck-are-cjs-amd-umd-and-esm-ikm","comments_count":3,"positive_reactions_count":14,"page_views_count":4442,"published_timestamp":"2019-07-22T12:36:29Z","body_markdown":"---\ntitle: JAVASCRIPT: What the heck are CJS, AMD, UMD, and ESM?\npublished: true\ndescription: Differences between CJS, AMD, UMD, ESM\ntags: Javascript, modules, CJS, ESM\n---\n\nIn the beginning, Javascript did not have a way to import/export modules. This is a problem. Imagine writing your app in just one file - it would be nightmarish!\n\nThen, people much, much smarter than me attempted to add modularity to Javascript. Some of them are __CJS, AMD, UMD, and ESM__. You may have heard some of them (there are other methods, but these are the big players).\n\nI will cover high-level information: syntax, purpose, and basic behaviors. My goal is to help readers recognize when they see them in the wild 💡.\n\n\n# CJS\nCJS is short for CommonJS. Here is what it looks like:\n\n```\n//importing \nconst doSomething = require('./doSomething.js'); \n\n//exporting\nmodule.exports = function doSomething(n) {\n  // do something\n}\n```\n\n- Some of you may immediately recognize CJS syntax from node. That's because node [uses CJS module format](https://blog.risingstack.com/node-js-at-scale-module-system-commonjs-require/). \n- CJS imports module synchronously.\n- You can import from a library `node_modules` or local dir. Either by  `const myLocalModule = require('./some/local/file.js')` or `var React = require('react');` works.\n- When CJS imports, it will give you a __copy__ of the imported object.\n- CJS will not work in the browser. It will have to be transpiled and bundled.\n\n\n# AMD\nAMD stands for Asynchronous Module Definition. Here is a sample code:\n\n```\ndefine(['dep1', 'dep2'], function (dep1, dep2) {\n    //Define the module value by returning a value.\n    return function () {};\n});\n```\nor\n```\n// \"simplified CommonJS wrapping\" https://requirejs.org/docs/whyamd.html\ndefine(function (require) {\n    var dep1 = require('dep1'),\n        dep2 = require('dep2');\n    return function () {};\n});\n```\n\n- AMD imports modules asynchronously (hence the name). \n- AMD is [made for frontend](http://tagneto.blogspot.com/2011/04/on-inventing-js-module-formats-and.html) (when it was proposed) (while CJS backend).\n- AMD syntax is less intuitive than CJS.\nI think of AMD as the exact opposite sibling of CJS. \n\n# UMD\n\nUMD stands for Universal Module Definition. Here is what it may look like ([source](http://bob.yexley.net/umd-javascript-that-runs-anywhere/)):\n```\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"jquery\", \"underscore\"], factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require(\"jquery\"), require(\"underscore\"));\n    } else {\n        root.Requester = factory(root.$, root._);\n    }\n}(this, function ($, _) {\n    // this is where I defined my module implementation\n\n    var Requester = { // ... };\n\n    return Requester;\n}));\n```\n\n- Works on front and back end (hence the name _universal_).\n- Unlike CJS or AMD, UMD is more like a pattern to configure several module systems. Check [here](https://github.com/umdjs/umd/) for more patterns.\n- UMD is usually used as a fallback module when using bundler like Rollup/ Webpack\n\n# ESM\n\nESM stands for ES Modules. It is Javascript's proposal to implement a [standard](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/) module system. I am sure many of you have seen this:\n\n```\nimport React from 'react';\n```\n\nOther sightings in the wild:\n```\nimport {foo, bar} from './myLib';\n\n...\n\nexport default function() {\n  // your Function\n};\nexport const function1() {...};\nexport const function2() {...};\n```\n\n- Works in [many modern browsers](https://caniuse.com/#feat=es6-module)\n- It has the best of both worlds: CJS-like simple syntax and AMD's async\n- [Tree-shakeable](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/), due to ES6's [static module structure](https://exploringjs.com/es6/ch_modules.html#static-module-structure) \n- ESM allows bundlers like Rollup to [remove unnecessary code](https://dev.to/bennypowers/you-should-be-using-esm-kn3), allowing sites to ship less codes to get faster load.\n- Can be called in HTML, just do:\n\n```\n<script type=\"module\">\n  import {func1} from 'my-lib';\n\n  func1();\n</script>\n```\nThis may not work 100% in all browsers yet ([source](https://jakearchibald.com/2017/es-modules-in-browsers/)).\n\n\n# Summary\n\n- ESM is the best module format thanks to its simple syntax, async nature, and tree-shakeability.\n- UMD works everywhere and usually used as a fallback in case ESM does not work\n- CJS is synchronous and good for back end. \n- AMD is asynchronous and good for front end.\n\nThanks for reading, devs! In the future, I plan to write in depth about each module, especially ESM because it is packed with many awesomeness. Stay tuned! \n\nLet me know if you notice any errors.\n\n# Resources:\n\n- [basic js modules](https://www.freecodecamp.org/news/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e/)\n- [CJS in nodejs](https://blog.risingstack.com/node-js-at-scale-module-system-commonjs-require/)\n- [CJs-ESM comparison](https://jsmodules.io/cjs.html)\n- [On inventing JS module formats and script loaders](http://tagneto.blogspot.com/2011/04/on-inventing-js-module-formats-and.html)\n- [Why use AMD](https://requirejs.org/docs/whyamd.html)\n- [es6 modules browser compatibility](https://caniuse.com/#feat=es6-module)\n- [Reduce JS payloads with tree-shaking](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/)\n- [JS modules - static structure](https://exploringjs.com/es6/ch_modules.html#static-module-structure)\n- [ESM in browsers](https://jakearchibald.com/2017/es-modules-in-browsers/)\n- [ES Modules deep dive - cartoon](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)\n- [Reasons to use ESM](https://dev.to/bennypowers/you-should-be-using-esm-kn3)\n","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"bundle-your-javascript-code-from-scratch-3dpo":{"type_of":"article","id":140791,"title":"JAVASCRIPT: Bundle Your Javascript Code From Scratch ","description":"Lessons from building bundler from scratch","cover_image":null,"published":true,"published_at":"2019-07-17T12:33:46.430Z","tag_list":["bundler","javascript","packages","webdev"],"slug":"bundle-your-javascript-code-from-scratch-3dpo","path":"/iggredible/bundle-your-javascript-code-from-scratch-3dpo","url":"https://dev.to/iggredible/bundle-your-javascript-code-from-scratch-3dpo","canonical_url":"https://dev.to/iggredible/bundle-your-javascript-code-from-scratch-3dpo","comments_count":4,"positive_reactions_count":4,"page_views_count":171,"published_timestamp":"2019-07-17T12:33:46Z","body_markdown":"---\ntitle: JAVASCRIPT: Bundle Your Javascript Code From Scratch \npublished: true\ndescription: Lessons from building bundler from scratch\ntags: bundler, javascript, packages, webdev\n---\n\n# Intro\n\nBundling is an indispensable part of building modern Javascript app. Webpack, Rollup, Parcel-bunder are some of the big name bundlers. For the most part, bundling has been a magical process: just give the bundler the entry, the output, add some other config, and *POOF*! - suddenly your bundle.js is ready.\n\n![magic](https://thepracticaldev.s3.amazonaws.com/i/6pkw4boytmpzuki9wq31.gif)\n\nIn this post, I will explain what a bundler is and why it is a good thing to use one - we will do it by creating one from scratch.\n\n# What a bundler is and why we need it\n\n> A bundler is a tool that puts your entry code along with all its dependencies together in one JS file.\n\nWhy would we want to use it? Can't we just upload the entire files and directories of our project and not go through extra step?\n\nHere are two reasons:\n\n1. Javascript initially had no standard/ built-in module system. `import` and `export` syntax is a recent convention in ES6. [Not all browser supports it yet](https://caniuse.com/#feat=es6-module).\n2. It is better to put everything together in one bundled file. Imagine a project where we have 5 different JS files. The client will have to make **5 requests** to your server (or CDN, or both - btw, it is [even better](https://stackoverflow.com/questions/7445909/bundling-js-files-vs-cdn) to bundle them and put them in CDN.) - but that is still 4 extra requests that client could have avoided if our project was bundled up in one JS file (client will only have to make one request). _More requests = more overhead_.\n\nI hope these are enough reasons to want to use a bundler. Let's move on to understanding how a bundler works\n\nBest way to understand how something works is to build/ tinker it.\n\n# Building bundler\n\nBefore we start, let's go through the basic of what our project will look like.\n\n![bandler logo](https://thepracticaldev.s3.amazonaws.com/i/t0tm22z42vxz0iskdgje.png)\n\nIntroducing [Bandler](https://github.com/iggredible/bandler). The tiniest, cutest, awesomest bundler you have ever seen (ok, you can name it whatever. That's just what I named my bundler).\n\nBandler will have a structure like this:\n\n`entry.js` -> `module1.js` -> `module2.js`\n\nThe entry will be called `entry.js`. It will have one dependency, `module1.js`, which has a dependency, `module2.js`.\n\nOur project will use [ES6 module syntax](\nhttps://alligator.io/js/modules-es6/)(`import`/`export`). Our task is to extend the module support to older browser. We have to transpile the ES6 syntax into something all/ most browsers can understand.\n\nHere are 8 steps how should do it:\n1. Read content of `entry.js`\n2. Parse that content and make a **list** of all `import` declarations\n3. Transpile the content from step 1 from ES6 to ES5\n4. Assign each dependency file with unique ID to be referenced later (for example, if we use `import module1 from './module1.js'` in entry, `./module1.js` is a dependency and we will map this with a unique ID)\n5. Put all of the info from steps 2-4 in one object\n6. Create a 'dependency graph' (by iterating through all dependencies,  all dependencies of each dependency, and so on; repeat steps 1-5)\n7. Pack everything in step 6 together\n8. Celebrate because our bundler is done! 🎊🙌 \n\nIf it looks complicated, don't worry, because it is not.\n\n## Starting Project\n\nIn this section we'll do the setup: start a new directory for our project, `cd` into it, and install some libraries.\n\n`mkdir bundler-playground && cd $_`\n\nStart npm project. \n\n`npm init -y`\n\nInstall some additional libraries:\n1. `@babel/parser` to parse our code and returns an AST object\n2. `@babel/traverse` to traverse/ walk through our AST object; this will help us look for all import declarations\n3. `@babel/core` to transpile ES6 -> ES5\n4. `resolve` to get full path of each dependency (ex: turn `./module1.js` into something like `/User/iggy/project/bundler-playground/module1.js`)\n\n`npm install --save @babel/parser @babel/traverse @babel/core resolve`\n\nCreate a new `index.js` in root, and add import these guys:\n\n```\n const fs = require(\"fs\");\n const path = require(\"path\");\n const parser = require(\"@babel/parser\");\n const traverse = require(\"@babel/traverse\").default;\n const babel = require(\"@babel/core\"); \n const resolve = require(\"resolve\").sync;\n```\n\n## Get module info\n\nIn this section, we will:\n1. Assign a particular `filePath` with unique ID (to be referenced later)\n2. Get all dependencies used by this file (list all `import`s used)\n3. Transpile ES code\n\nHere is the code for this section.\n\n```\nlet ID = 0;\n\nfunction createModuleInfo(filePath) {\n  const content = fs.readFileSync(filePath, \"utf-8\");\n  const ast = parser.parse(content, {\n    sourceType: \"module\"\n  });\n  const deps = [];\n  traverse(ast, {\n    ImportDeclaration: ({ node }) => {\n      deps.push(node.source.value);\n    }\n  });\n  const id = ID++;\n  const { code } = babel.transformFromAstSync(ast, null, {\n    presets: [\"@babel/preset-env\"]\n  });\n\n  return {\n    id,\n    filePath,\n    deps,\n    code\n  };\n}\n```\nWe got the file content using [`readFileSync()`](https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options). Then we parsed the content to get [AST](https://stackoverflow.com/questions/16127985/what-is-javascript-ast-how-to-play-with-it) information. Once AST is acquired, we traversed the AST and look for all import instances using [`ImportDeclaration`](https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md#importdeclaration) API. Lastly, we transpiled our code from ES6 using babel core's [`transformFromAstSync`](https://babeljs.io/docs/en/babel-core#transformfromastsync).\n\nFor ID, we used a simple incrementing number (it's better to use random GUID, since it is a demo, `ID++` will do)\n\nWith this, we have ourselves a nifty module information consisting of a unique ID, list of all dependencies (all imports), and the code inside that module. Next, we iterate the process for all relevant modules to create a dependency graph.\n\n## Creating Dependency Graph\n\nDependency graph is a collection of interrelated modules used in our app, starting from entry point. \n\nHere is a code for this section.\n\n```\nfunction createDependencyGraph(entry) {\n  const entryInfo = createModuleInfo(entry);\n  const graphArr = [];\n  graphArr.push(entryInfo);\n  for (const module of graphArr) {\n    module.map = {};\n    module.deps.forEach(depPath => {\n      const baseDir = path.dirname(module.filePath);\n      const moduleDepPath = resolve(depPath, { baseDir });\n      const moduleInfo = createModuleInfo(moduleDepPath);\n      graphArr.push(moduleInfo);\n      module.map[depPath] = moduleInfo.id;\n    });\n  }\n  return graphArr;\n}\n```\n\nWe will be using an array type for our dependency graph. We start by pushing our entry info first. \n\nThen we iterate through dependency graph elements (starting with entry).\n\n```\nconst baseDir = path.dirname(module.filePath);\nconst moduleDepPath = resolve(depPath, { baseDir });\nconst moduleInfo = createModuleInfo(moduleDepPath);\ngraphArr.push(moduleInfo);\n```\n\nHere we use `path.dirname` and `resolve` to get full path of each module, get the info using the full path, and push that info into our dependency graph array.\n\nNote these lines:\n\n```\nmodule.map = {};\n...\nmodule.map[depPath] = moduleInfo.id;\n```\n\nHere we add an additional attribute `map` inside our `moduleInfo` object. This attribute will be used on next step as a *lookup* to map each module with unique identifier. For example:\n\n| module     | ID |\n|------------|----|\n| entry.js   | 0  |\n| module1.js | 1  |\n| module2.js | 2  |\n| etc        | n  |\n\nIn the end, we end up with an array of module infos of all dependency used in the entire project.\n\n## Packing them all together\n\nNow that we have dependency graph, the last step is to **pack** them together. \n\n![mickey packing](https://thepracticaldev.s3.amazonaws.com/i/0rz8w9epr6il0ie6rea4.gif)\n\n```\nfunction pack(graph) {\n  const moduleArgArr = graph.map(module => {\n    return `${module.id}: {\n      factory: (exports, require) => {\n        ${module.code}\n      },\n      map: ${JSON.stringify(module.map)}\n    }`;\n  });\n  const iifeBundler = `(function(modules){\n    const require = id => {\n      const {factory, map} = modules[id];\n      const localRequire = requireDeclarationName => require(map[requireDeclarationName]); \n      const module = {exports: {}};\n      factory(module.exports, localRequire); \n      return module.exports; \n    } \n    require(0);\n  })({${moduleArgArr.join()}})\n  `;\n  return iifeBundler;\n}\n```\n\nFirst, we create a factory pattern over the code of each module. It pass an `export` and `require`. Keep these 2 arguments in mind. We are keeping the map from previous step.\n\n```\nreturn `${module.id}: {\n  factory: (exports, require) => {\n    ${module.code}\n  },\n  map: ${JSON.stringify(module.map)}\n  }`;\n```\n\nSecond, we created an IIFE to run the entire dependency graphs together. The next part might be confusing - I struggled to understand this part initially, but with patience, it will make sense!\n\n```\n  const iifeBundler = `(function(modules){\n    const require = id => {\n      const {factory, map} = modules[id];\n      const localRequire = requireDeclarationName => require(map[requireDeclarationName]); \n      const module = {exports: {}};\n      factory(module.exports, localRequire); \n      return module.exports; \n    } \n    require(0);\n  })({${moduleArgArr.join()}})\n  `;\n```\n\n1. We are using IIFE pattern to scope the variables so they do not affect global variables\n2. The dependency graph we created earlier section is being passed as the argument (`${moduleArgArr.join()}`)\n3. That dependency graph is being passed inside IIFE as `modules`\n4. We created a `require(id)` function. This function has two effects:\n  - It recursively calls its own with the ID of other dependencies via `require(map[requireDeclarationName])`. This translates to something like `require(1)` - recalling the mapping function earlier, turns into `require('./module1.js')`\n  - It executes the actual code from step 1 (createModuleInfo) step when it runs `factory(module.exports, localRequire)`\n  - This function returns `module.exports` - although it is initially empty (`{exports: {}}`), after running `factory()`, the value of this `module.exports` is the `exports` value inside `factory` we created earlier (think about it)\n\n\n## Code Repo\n\nThe final code for this blog can be found [here](https://github.com/iggredible/bandler/tree/ce43fa000b16931e9518e94506a81b381eed764b) to compare code.\n\nThe full code will look something like this:\n\n```\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst parser = require(\"@babel/parser\"); // parses and returns AST\nconst traverse = require(\"@babel/traverse\").default; // AST walker\nconst babel = require(\"@babel/core\"); // main babel functionality\nconst resolve = require(\"resolve\").sync; // get full path to dependencies\n\nlet ID = 0;\n\n/*\n * Given filePath, return module information\n * Module information includes:\n * module ID\n * module filePath\n * all dependencies used in the module (in array form)\n * code inside the module\n */\nfunction createModuleInfo(filePath) {\n  const content = fs.readFileSync(filePath, \"utf-8\");\n  const ast = parser.parse(content, {\n    sourceType: \"module\"\n  });\n  const deps = [];\n  traverse(ast, {\n    ImportDeclaration: ({ node }) => {\n      deps.push(node.source.value);\n    }\n  });\n  const id = ID++;\n  const { code } = babel.transformFromAstSync(ast, null, {\n    presets: [\"@babel/preset-env\"]\n  });\n\n  return {\n    id,\n    filePath,\n    deps,\n    code\n  };\n}\n\n/*\n * Given entry path,\n * returns an array containing information from each module\n */\nfunction createDependencyGraph(entry) {\n  const entryInfo = createModuleInfo(entry);\n  const graphArr = [];\n  graphArr.push(entryInfo);\n  for (const module of graphArr) {\n    module.map = {};\n    module.deps.forEach(depPath => {\n      const baseDir = path.dirname(module.filePath);\n      const moduleDepPath = resolve(depPath, { baseDir });\n      const moduleInfo = createModuleInfo(moduleDepPath);\n      graphArr.push(moduleInfo);\n      module.map[depPath] = moduleInfo.id;\n    });\n  }\n  return graphArr;\n}\n\n/*\n * Given an array containing information from each module\n * return a bundled code to run the modules\n */\nfunction pack(graph) {\n  const moduleArgArr = graph.map(module => {\n    return `${module.id}: {\n      factory: (exports, require) => {\n        ${module.code}\n      },\n      map: ${JSON.stringify(module.map)}\n    }`;\n  });\n  const iifeBundler = `(function(modules){\n    const require = id => {\n      const {factory, map} = modules[id];\n      const localRequire = requireDeclarationName => require(map[requireDeclarationName]); \n      const module = {exports: {}};\n\n      factory(module.exports, localRequire); \n      return module.exports; \n    } \n    require(0);\n  })({${moduleArgArr.join()}})\n  `;\n  return iifeBundler;\n}\n\nconsole.log(\"***** Copy code below and paste into browser *****\");\n\n/* create dependency graph */\nconst graph = createDependencyGraph(\"./entry.js\"); // wherever your entry is\n/* create bundle based on dependency graph */\nconst bundle = pack(graph);\n\nconsole.log(bundle);\nconsole.log(\"***** Copy code above and paste into browser *****\");\n\n```\n\nIf we run `node ./index.js`, we'll get something like\n\n```\n(function(modules){\n    const require = id => {\n      const {factory, map} = modules[id];\n      const localRequire = requireDeclarationName => require(map[requireDeclarationName]);\n      const module = {exports: {}};\n\n      factory(module.exports, localRequire);\n      return module.exports;\n    }\n    require(0);\n  })({0: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nvar _module = _interopRequireDefault(require(\"./module1.js\"));\n\nvar _module2 = _interopRequireDefault(require(\"./module2.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n(0, _module[\"default\"])();\n(0, _module2[\"default\"])();\n      },\n      map: {\"./module1.js\":1,\"./module2.js\":2}\n    },1: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _module = _interopRequireDefault(require(\"./module2.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = function module1() {\n  (0, _module[\"default\"])();\n  console.log(\"hello from module1!\");\n};\n\nvar _default = module1;\nexports[\"default\"] = _default;\n      },\n      map: {\"./module2.js\":3}\n    },2: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar module2 = function module2() {\n  console.log(\"Hello from module2!\");\n};\n\nvar _default = module2;\nexports[\"default\"] = _default;\n      },\n      map: {}\n    },3: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar module2 = function module2() {\n  console.log(\"Hello from module2!\");\n};\n\nvar _default = module2;\nexports[\"default\"] = _default;\n      },\n      map: {}\n    }})(function(modules){\n    const require = id => {\n      const {factory, map} = modules[id];\n      const localRequire = requireDeclarationName => require(map[requireDeclarationName]);\n      const module = {exports: {}};\n\n      factory(module.exports, localRequire);\n      return module.exports;\n    }\n    require(0);\n  })({0: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nvar _module = _interopRequireDefault(require(\"./module1.js\"));\n\nvar _module2 = _interopRequireDefault(require(\"./module2.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n(0, _module[\"default\"])();\n(0, _module2[\"default\"])();\n      },\n      map: {\"./module1.js\":1,\"./module2.js\":2}\n    },1: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _module = _interopRequireDefault(require(\"./module2.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar module1 = function module1() {\n  (0, _module[\"default\"])();\n  console.log(\"hello from module1!\");\n};\n\nvar _default = module1;\nexports[\"default\"] = _default;\n      },\n      map: {\"./module2.js\":3}\n    },2: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar module2 = function module2() {\n  console.log(\"Hello from module2!\");\n};\n\nvar _default = module2;\nexports[\"default\"] = _default;\n      },\n      map: {}\n    },3: {\n      factory: (exports, require) => {\n        \"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar module2 = function module2() {\n  console.log(\"Hello from module2!\");\n};\n\nvar _default = module2;\nexports[\"default\"] = _default;\n      },\n      map: {}\n    }})\n```\n\nCopy/Paste that into browser and you'll see\n\n```\nHello from module2!\nhello from module1!\nHello from module2!\n```\n\nCongratulations! We have just built an entire bundler... from scratch!!\n\n![traveling with giant luggage](https://thepracticaldev.s3.amazonaws.com/i/ppozpb2ciyp2ciitsih7.gif)\n \n\n## Bonus\n\nIn addition to creating an ES6 bundler, I attempted to create a bundler that bundles either CJS and ES6, [Bandler](https://github.com/iggredible/bandler) ([NPM](https://www.npmjs.com/package/bandler))\n\nI won't go too deep here - but in addition to using babel parser and babel traverse, I used [`detective`](https://www.npmjs.com/package/detective) library that specifically searches and lists all CJS requires (ex: `require('./your/lib.js')`) instances from a project. I saw that Babel does not have CJS syntax declaration [here](https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md). \n\nCan you think of some other ways to make CJS and ES6 bundler?\n\n## Resources, links, etc\n\nPopular bundlers\n- [browserify](http://browserify.org/)\n- [webpack](https://webpack.js.org/)\n- [rollup](https://rollupjs.org/guide/en/)\n- [parcel-bundler](https://github.com/parcel-bundler/parcel)\n\nInspirations for this post\n- [minipack](https://github.com/ronami/minipack/blob/master/src/minipack.js)\n- [wbpck-bundler](https://github.com/adamisntdead/wbpck-bundler)\n\nReadings on bundlers\n- [bundler overview](https://medium.com/@gimenete/how-javascript-bundlers-work-1fc0d0caf2da)\n- [create your own bundler](https://www.freecodecamp.org/news/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e/) - creator of wbpck-bundler mentioned above\n- [small list of popular js bundlers](https://dev.to/kayis/4-javascript-bundlers-2g4b)\n- (Yet another) [list of build tools](https://survivejs.com/webpack/appendices/comparison/)","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"intro-to-virtual-dom-4li1":{"type_of":"article","id":117532,"title":"Intro to Virtual DOM","description":"Introduction to Virtual DOM, how to make your own virtual DOM","cover_image":null,"published":true,"published_at":"2019-06-03T13:04:34.734Z","tag_list":["virtualdom","dom","javascript","webdev"],"slug":"intro-to-virtual-dom-4li1","path":"/iggredible/intro-to-virtual-dom-4li1","url":"https://dev.to/iggredible/intro-to-virtual-dom-4li1","canonical_url":"https://dev.to/iggredible/intro-to-virtual-dom-4li1","comments_count":0,"positive_reactions_count":5,"page_views_count":39,"published_timestamp":"2019-06-03T13:04:34Z","body_markdown":"---\ntitle: Intro to Virtual DOM\npublished: true\ndescription: Introduction to Virtual DOM, how to make your own virtual DOM\ntags: virtualDOM, DOM, javascript, webdev\n---\n\n![HTML Image on Screen](https://thepracticaldev.s3.amazonaws.com/i/v2eqqpibor579mb9jw5a.jpg)\n# Intro\n\nImagine you are building your house. One day you want to add a new kitchen island - so you rebuild the house from scratch. Then you want to repaint the house, so you again rebuild the whole house. Then it's time to change your window panes into, so you rebuild it from scratch...again. Unless you are Fix-It Felix, this is not the way to make house updates.\n\n![fix-it-felix](https://media.giphy.com/media/MtIPR6C5okdt6/giphy.gif)\n\nInstead, you should have a blueprint of the house. To add a kitchen island, you find which area will be affected on the blueprint and only rebuild that area. If you want to repaint, calculate the wall perimeter area from blueprint, move out all the stuff next to the wall (just don't do [this](https://www.youtube.com/watch?v=EiZoSuNej5U) please), and start painting. If you want to change your window panes, locate all windows from blueprint and replace them.\n\nThe same can be said about DOM. Think of HTML DOM as a house and virtual DOM as blueprint of the house. We should use virtual DOM to help us make changes to our DOM.\nThis post is largely inspired by Jason Yu's [Building a Simple Virtual DOM from Scratch](https://www.youtube.com/watch?v=85gJMUEcnkc) video (I am not affiliated with him, but I found his stuff super helpful. You should check him out!). This is a shortened and simplified version. My hope is that readers who are new with virtual DOM will gain better understanding what virtual DOM is.\n\n# Layout of the land\n\nThe code can be found in [this github repo](https://github.com/iggredible/simple-vdom-demo). This post is divided into 6 steps:\n\n1. Setup\n2. Creating virtual DOM\n3. Rendering DOM nodes\n4. Mounting into HTML page\n5. Updating the DOM the inefficient way\n6. Updating the DOM the efficient way\n\nLet's get started!\n\n# Setup\n\nBefore we even begin, make sure we have [latest node](https://nodejs.org/en/download/) ready. Create a folder and cd into it, start an NPM project (`npm init -y`). Create `index.html` and `vdom.js` in root directory. For quick bundling, we'll use [`parcel-bundler`](https://github.com/parcel-bundler/parcel) so run `npm install parcel-bundler`. I also like having \"start\": \"parcel index.html\" in package.json. \n\nMy `index.html` looks like this:\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head> \n    <meta charset=\"UTF-8\"> \n    <title>Basic Virtual Dom Demo</title>\n  </head>\n  <body> \n    <h1>Virtual Dom Demo</h1> \n    <div id=\"app\"></div> \n    <script src=\"./vdom.js\"></script>\n  </body>\n</html>\n```\n\nJust make sure to import `vdom.js` and have something like `<div id=\"app\"></div>` to mount our DOM later.\n\n# Creating virtual DOM\n\nVirtual DOM is nothing but a *javascript object that represents DOM nodes*. As mentioned earlier, virtual DOM to DOM is what a blueprint is to a house. A house is physical, expensive to update, while a blueprint is just a piece of paper and much easier to update.\n\nThis is what our virtual DOM looks like:\n\n```\nconst vAppStructure = num => {\n  return {\n    tagName: \"ul\",\n    text: \"\",\n    attrs: { class: \"parent-class\", id: `parent-id-${num}` },\n    children: [\n      {\n        tagName: \"li\",\n        attrs: \"\",\n        text: \"list 1\",\n        attrs: { class: \"child-class\" },\n        children: []\n      },\n      {\n        tagName: \"li\",\n        attrs: \"\",\n        text: \"list 2\",\n        attrs: { class: \"child-class\" },\n        children: [{ tagName: \"input\", attrs: \"\", text: \"\", children: [] }]\n      }\n    ]\n  };\n};\n```\n\nObservations:\n\n1. Virtual DOM is a JS object.\n2. In this example, it is a function because in the future it needs to be updated. Virtual DOM does not have to be a function at all, it can be a plain JS object (technically you can just do const myVDom = {name: \"div\"} and that will counts as a VDOM!)\n3. The structure represent a `<ul>` element with 2 `<li>` children.\n4. The 2nd child has another child, an input. It will be used in step 4 later.\n\n# Rendering DOM Nodes\n\nWe have a virtual DOM structure now. We should render it into DOM nodes. The main Javascript APIs needed in this post are: `document.createElement`, `Element.setAttribute`, `document.createTextNode`, and `Element.appendChild`. First to create element, second to set attributes, third to deal with text, and fourth to attach any child into parent. You'll see `$` notation throughout the codes - variables with `$` represent DOM nodes. \n\n```\nconst renderer = node => {\n  const { tagName, text, attrs, children } = node;\n  const $elem = document.createElement(tagName);\n\n  for (const attr in attrs) {\n    $elem.setAttribute(attr, attrs[attr]);\n  }\n\n  if (text) {\n    const $text = document.createTextNode(text);\n    $elem.appendChild($text);\n  }\n\n  if (children && children.length > 0) {\n    for (const child of children) {\n      const $child = renderer(child);\n      $elem.appendChild($child);\n    }\n  }\n\n  return $elem;\n};\n```\n\nObservations:\n\n1. The `tagName` that we have in virtual DOM is rendered using `document.createElement`. \n2. Each `attrs` is iterated and is set onto that newly-created-element.\n3. If there is a text, we create and append it into that element.\n4. If our virtual DOM contains children, it goes through each child and *recursively* run renderer function on each element (if the children have children, they will go through the same recursion, and so on, until no children is found). The children is appended into the original element.\n\nNow that we have DOM nodes created, attributes and text appended, and children rendered and appended - these DOM nodes can't wait to be attached into our HTML file, so let's mount it!\n\n# Mounting\n\nThink of mounting as placing our nodes into HTML page. We will use `document.replaceWith`.\n\n```\nconst mount = ($nodeToReplace, $nodeTarget) => {\n  $nodeTarget.replaceWith($nodeToReplace);\n  return $nodeToReplace;\n};\n```\n\nNow we have all the functions we need. Let's set up some selectors and mount it:\n\n```\nconst app = document.querySelector(\"#app\");\nlet num = 10;\nlet currentVApp = vAppStructure(num); \nlet $vApp = renderer(currentVApp); \nmount($vApp, app);\n```\n\nYou can run `parcel index.html` (or `npm run start`) and watch your virtual DOM displayed in HTML! Super cool. You have rendered your own HTML page using pure Javascript with virtual DOM! This is basic virtual DOM and it is powerful. Next we will explore the power of virtual DOM by updating it periodically.\n\n# Updating (the inefficient way)\n\nThe power of virtual DOM is whenever you update your JS object without needing screen refresh. \nTo demonstrate updating, we will use `setInterval` to increase the number per second.\n\n```\nlet $rootElem = mount($vApp, app);\nlet newVApp;\n\nsetInterval(() => {\n  num++;\n  newVApp = vAppStructure(num);\n  let $newVApp = renderer(newVApp);\n  $rootElem = mount($newVApp, $rootElem);\n\n  currentVApp = newVApp;\n}, 1000);\n```\n\nNow if you open up devTools and observe the id of `ul` element - _it is now increasing by 1_. Sweet! We have a working, self-updating DOM node. Beautiful!!\n\nObservations:\n\n1. Note the assignment$rootElem = mount($newVApp, $rootElem). This is necessary because we are mounting the updated DOM nodes with different number and we are replacing the old one with new one each second. Mounting returns the updated DOM nodes, so we are constantly replacing the old one with new one.\n2. There is a problem. Try typing something on input, it gets refreshed each second. This is because the entire DOM is being replaced each second including input. We want to update affected component only without re-rendering the entire DOM.\n\nLet's do it the right way!\n\n# Updating the efficient way\n\nOne of the most popular Frontend library in the world, React, uses virtual DOM. The way React treats virtual DOM is by [diffing](https://reactjs.org/docs/reconciliation.html). \n1. React creates virtual DOM of the app and saves a copy. \n2. When a change occurs (say someone updates a state), React compares the previous copy of virtual DOM with recent copy of virtualDOM - it makes a list of all the differences. \n3. React updates the actual DOM based on the differences found.\n\nWe will create a (very) simplified version of diffing. \n\n```\nconst diff = (oldVApp, newVApp) => {\n  const patchAttrs = diffAttrs(oldVApp.attrs, newVApp.attrs);\n\n  return $node => {\n    patchAttrs($node);\n    return $node; // important to return $node, because after diffing, we patch($rootElem) and it expects to return some sort of element!\n  };\n};\nexport default diff;\n```\n\nObservations:\n\n1. It takes old virtual DOM and new virtual DOM as arguments. Beware, since it is simplified, it will not try to find the differences between old and new virtual DOM but it will simply apply the new attributes into the DOM elements. \n\nThe `diffAttrs` function looks like this;\n\n```\nconst diffAttrs = (oldAttrs, newAttrs) => {\n  const patches = [];\n\n  for (const attr in newAttrs) {\n    patches.push($node => {\n      $node.setAttribute(attr, newAttrs[attr]);\n      return $node;\n    });\n  }\n\n  for (const attr in oldAttrs) {\n    if (!(attr in newAttrs)) {\n      patches.push($node => {\n        $node.removeAttribute(attr);\n        return $node;\n      });\n    }\n  }\n  return $node => {\n    for (const patch of patches) {\n      patch($node);\n    }\n  };\n};\n```\n\nObservations:\n\n1. We are only diffing only attributes and not `text`, `children`, `tagName`. For the sake of brevity I skipped them. The logic is similar though.\n2. When iterating through all attributes, each new attribute is set into the element node (so if new one has `id=\"my-id-2\"`), it will set that new id into the element node.\n3. We check each `attr` in `oldAttrs`. The assumption is if an attribute is found in `oldAttrs` that does not exist in `newAttrs`, that attribute must have gotten removed, so we delete it.\n4. We return a function to perform patch later.\n\nOur updated setInterval will look like this:\n\n```\nsetInterval(() => {\n num++;\n newVApp = vAppStructure(num);\n\n const patch = diff(currentVApp, newVApp);\n $rootElem = patch($rootElem);\ncurrentVApp = newVApp;\n}, 1000);\n```\n\nObservations:\n\n1. Instead of remounting the entire updated HTML element per second, we are setting attributes on new DOM nodes. This will not re-render the entire DOM. `input` now works as expected.\n\n# Conclusion\n\nTo recap, here is what we learned:\n\n1. Virtual DOM is a plain JS object describing what a DOM should look like, like a blueprint of a house (whereas a DOM is like a house).\n2. Mounting virtual DOM is a process of iterating virtual DOM properties and calling `setElement`, `createTextNode`, `setAttribute`, and `appendChild` (there are more APIs needed in more complicated app ).\n\n3. The best way to update our app is not to replace the entire DOM structure per update (it will force other element to re-render unnecessarily like `input`), but to go through each attribute in each element and set new attributes. Doing this will not re-render the element.\n\nThis is far from perfect - it is a simplified representation of what React/ other framework does. \n\nThanks for reading this. Appreciate you spending your time and reading! If you have any questions, found mistakes, please feel free to drop by comments. Let me know what new thing you learned from this!\n\nSome resources I found helpful:\n\n- [React Virtual DOM](https://www.codecademy.com/articles/react-virtual-dom)\n- [How Virtual-DOM and diffing works in React](https://medium.com/@gethylgeorge/how-virtual-dom-and-diffing-works-in-react-6fc805f9f84e)\n- [How Browsers Work](http://taligarsiel.com/Projects/howbrowserswork1.htm)","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"notes-from-young-engineer-read-code-9n6":{"type_of":"article","id":106697,"title":"Why reading code is a habit all beginning developers should cultivate","description":"Reading code helps beginning developers to grow and to become better","cover_image":null,"published":true,"published_at":"2019-05-07T12:52:48.056Z","tag_list":["webdev","growth","juniordeveloper","habit"],"slug":"notes-from-young-engineer-read-code-9n6","path":"/iggredible/notes-from-young-engineer-read-code-9n6","url":"https://dev.to/iggredible/notes-from-young-engineer-read-code-9n6","canonical_url":"https://dev.to/iggredible/notes-from-young-engineer-read-code-9n6","comments_count":0,"positive_reactions_count":5,"page_views_count":39,"published_timestamp":"2019-05-07T12:52:48Z","body_markdown":"---\r\ntitle: Why reading code is a habit all beginning developers should cultivate\r\npublished: true\r\ndescription: Reading code helps beginning developers to grow and to become better\r\ntags: web-development, growth, junior-developer, habit\r\n---\r\n\r\n![Even spidey reads books](https://subscriptions.acecomics.co.uk/wp-content/uploads/2017/07/swinging-spidey-ww-reverse.png)\r\n\r\nA principal engineer at work shared this [article](https://www.nemil.com/on-software-engineering/read-code.html) (Notes to a Young Software Engineer — Read Code). I have read it since at least 5 times. This article, in a sense, is my response as a beginner developer (< 2 yr experience) to that article.\r\n\r\nThis post is aimed for beginning developers, but I think anyone wanting to level up their skill may equally benefit. First, I will share one of (many) takeaways from article and later I will share my action items.\r\n\r\n# Read More Code\r\n\r\nI am not reading enough code.\r\n\r\nAs a developer, why am I not reading other people’s codes? Writers would read and learn from other writers. Joan Didion would [type out Hemingway’s works](https://www.theparisreview.org/interviews/3439/joan-didion-the-art-of-fiction-no-71-joan-didion) to learn how he used sentences. Lincoln [read the Bible over and over](http://www.abrahamlincolnsclassroom.org/abraham-lincoln-in-depth/abraham-lincoln-and-the-bible/). Not only writers, artists also copied the work of masters. Van Gogh [copied the work of old masters](https://www.scotthyoung.com/blog/2017/10/02/how-ben-franklin-learned-to-write/) in the beginning.\r\n\r\nDo I read other people’s code the way these great writers and artists do? Do I even bother reading the codes behind my dependencies? Do I know the main structure of React or Express? What about the internals of Rails (or whatever framework you use)?\r\n\r\nThe approach of reading code is not linear like reading a book. Nemil suggested that there are 4 steps to read code: Read, Structure, Dive, and Write (RSDW).\r\n\r\n# RSDW\r\nFirst is running the code. Before jumping into the internals of code, we need to know what it does and how it works. I think it is a good idea to learn some of its user-facing APIs.\r\n\r\nSecond is code structure. What pattern does it follow? Where is its entry point? Do you recall similar pattern with other codes you have seen?\r\n\r\nThird is deep dive into the code. What exactly happens when a certain API is called? Does it invoke other function(s)? Is it creating/ updating/ deleting new object?\r\n\r\nLast is to write. Write tests. Even if the library has tests, try to write my own test. Find a bug and solve it. Read the documentation, search for knowledge gap, and fill it!\r\n\r\n# Action Items\r\nI created 3 action items:\r\n\r\n1. During weekdays, do at least 60 minutes of deep, intentional code reading outside of work codebase. Start with small libraries with no dependencies if possible. I would shy away from gargantuan projects like React and Rails because it would take ages to read and understand the entire library. Pick one favorite language and stick to projects within that language. I don’t think anyone can go wrong starting small and gradually growing larger.\r\n2. Read every single line. Make sure I know what each line does. The first codebase I read took me almost four days (between work and other life obligations), but I think it is worth taking the time to fully understand. Take notes, ask questions, and try to think why it is written this way. What would happen if it was written in another way?\r\n3. Rewrite the entire code. Even better, try to make it go lighter and faster while maintaining the same behavior. Add one feature and remove another. Write tests. At least rewriting the entire code verbatim it would still benefit in big ways.\r\n\r\n# Conclusion\r\n\r\nBecoming a good coder is like becoming a good writer or artist — by reading and copying the work of masters. Most people don’t spend time to read other people’s codes. Reading codebase is not a linear process like reading a book. One approach to tackle a new codebase is by doing RSDW (Read, Structure, Dive and Write). It is good for beginning coders (like myself) to find a small codebase that I am interested, read it, and rewrite it.\r\n\r\nI read this article about 4 weeks ago and I think it is one of the best habits to develop. I am not affiliated with any of the links I mentioned in this article. I am sharing them out of pure appreciation!\r\n\r\nThank you for reading this all the way through! My hope is that people will benefit even in a small way by reading this and putting it into action. If you all have tips/ suggestion about some habits you think are helpful to become better developer, please feel free to share — I would love to hear! \r\n\r\nThis article is cross-published on [medium](https://medium.com/@igor.irianto/notes-from-young-engineer-read-code-dda711255942).","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}},"lazy-loading-with-intersectionobserver-api-3d6h":{"type_of":"article","id":105295,"title":"Lazy Loading With IntersectionObserver API","description":"strategy to use intersection observer for lazy loading","cover_image":null,"published":true,"published_at":"2019-05-01T12:25:08.995Z","tag_list":["javascript","webdev","lazyloading","intersectionobserver"],"slug":"lazy-loading-with-intersectionobserver-api-3d6h","path":"/iggredible/lazy-loading-with-intersectionobserver-api-3d6h","url":"https://dev.to/iggredible/lazy-loading-with-intersectionobserver-api-3d6h","canonical_url":"https://dev.to/iggredible/lazy-loading-with-intersectionobserver-api-3d6h","comments_count":3,"positive_reactions_count":55,"page_views_count":746,"published_timestamp":"2019-05-01T12:25:08Z","body_markdown":"---\r\ntitle: Lazy Loading With IntersectionObserver API\r\npublished: true\r\ndescription: strategy to use intersection observer for lazy loading\r\ntags: javascript, webdev, lazy-loading, IntersectionObserver\r\n---\r\n\r\n![lazy-kat](https://thepracticaldev.s3.amazonaws.com/i/dfhkoiqimufpr5zv0z36.gif)\r\n\r\nHello dev.to folks! This is my first post - woot! Pretty excited to share what I have been learning recently about lazy-loading. Please let me know how I can make this better! \r\n\r\nLazy loading image is useful for loading page with many contents. We can easily find libraries to do that, such as [yall.js](https://github.com/malchata/yall.js) and [lozad.js](https://apoorv.pro/lozad.js/). What most of these libraries have in common is they both use [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API). Let’s learn how to use `IntersectionObserver` so we can understand how these libraries work — or even write our own!\r\n\r\nFirst, I will briefly explain what `IntersectionObserver` does and second, how to use it to lazy load your own images.\r\n\r\n# What Does IntersectionObserver do?\r\n\r\n(In layman’s words) `IntersectionObserver` *asynchronously detects when an element intersects with ancestor element (usually viewport) and calls a callback function.*\r\n\r\n![viewport schematics](https://thepracticaldev.s3.amazonaws.com/i/gwvj2lrwfy97ljpj9lv3.png)\r\n\r\nImagine a viewport containing images. When page loads, some images are positioned directly within viewport while some are sitting below viewport, waiting for user to scroll down so they can be seen. As user scrolls down, the top part of some lower-positioned images would eventually intersect with the bottom viewport. It is when the first top image pixel intersects with viewport the callback function loads the image. \r\n\r\n# Sample Usage\r\n\r\nLet’s read the docs! Mozilla kindly gives us a starting point.\r\n\r\n```\r\nvar options = {\r\n  root: document.querySelector('#scrollArea'),\r\n  rootMargin: '0px',\r\n  threshold: 1.0\r\n}\r\n\r\nvar observer = new IntersectionObserver(callback, options);\r\nvar target = document.querySelector('#listItem');\r\nobserver.observe(target);\r\n```\r\n\r\n\r\nAbove is the minimum setup to lazy load `#listItem` (technically options is optional, so `var observer = new IntersectionObserver(callback);` is a more concise way to run it).\r\n\r\nAight, let’s use it on a more realistic scenario. We are going to:\r\n\r\n1. Have 10 images in HTML that we will lazy load\r\n2. Add CSS fade animation\r\n3. Add IntersectionObserver to load images\r\n\r\n# HTML Setup\r\n\r\n```\r\n<div><img data-src=”http://placehold.it/300x300?text=1\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=2\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=3\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=4\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=5\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=6\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=7\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=8\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=9\"></div>\r\n<div><img data-src=”http://placehold.it/300x300?text=10\"></div>\r\n```\r\n\r\nIf you notice, it does not use `src` but `data-src` attribute. One strategy for lazy loading is to start with HTML’s `data-*` attribute because `data-src` will not load the image.\r\n\r\n# CSS Setup\r\n\r\n```\r\n.fade {\r\n animation-duration: 3s;\r\n animation-name: fade;\r\n}\r\n@keyframes fade {\r\n from {\r\n opacity: 0;\r\n }\r\n to {\r\n opacity: 1;\r\n }\r\n}\r\n```\r\n\r\nThis setup is optional. I think helps with our observation (plus it is more aesthetically pleasing) to have the image lazy load with fade animation.\r\n\r\nBtw, you can check when the image is downloaded on network tabs if you use Chrome DevTool.\r\n\r\n# JS Setup\r\n\r\nI want the images to load only when 50% of it intersects with viewport. This is how to set it up:\r\n\r\n```\r\nconst images = document.querySelectorAll(‘img’)\r\nconst observer = new IntersectionObserver(entries => {\r\n entries.forEach(entry => {\r\n if(entry.isIntersecting) {\r\n const target = entry.target\r\n target.setAttribute(‘src’, target.dataset.src)\r\n target.classList.add(‘fade’)\r\n observer.unobserve(target)\r\n }\r\n })\r\n}, {\r\n threshold: 0.5\r\n})\r\nimages.forEach(image => observer.observe(image))\r\n```\r\n\r\nI want to highlight a few things that I was struggling to understand when learning IntersectionObserver.\r\n\r\n- The argument entries represents all the image element under `IntersectionObserver` (I find it a bit odd having to iterate twice with `images.forEach` and `entries.forEach`, but that’s the way it is done). At initial page load, all entries are called. Some immediately intersects (if they are within viewports when page renders) while some don’t. The ones that immediately intersects have their callback function called immediately.\r\n\r\n- `entry.isIntersecting` returns true when the image intersects with viewport. Another common check for intersectionality is `entry.intersectionRatio > 0`.\r\n\r\n- As mentioned before, a common strategy for lazy-loading is to initially start without `src`. We transfer values from `data-src` to `src` right before user is about to see it.\r\n\r\n- It is good practice to unobserve the object after it has been loaded.\r\nWe can change the amount or location of intersectionality with either `threshold` or `rootMargin` option. The ancestor element can be changed with root (default is viewport).\r\n\r\n# Conclusion\r\n\r\nAt the time of this writing, intersectionObserver is usable in major browsers except for IE. Check [caniuse](https://caniuse.com/#feat=intersectionobserver) site for complete list.\r\n\r\n`IntersectionObserver` is useful to lazy load element into viewport by passing the value from data-src into src upon callback. The same strategy can be applied to other elements.\r\n\r\nBelow are articles I read regarding `IntersectionObserver` I found useful (I am not affiliated with any of them, just appreciative of the information they gave and I hope it will help you too!)\r\n\r\n- [fireship](https://fireship.io/snippets/intersection-observer-lazy-load-images/)\r\n\r\n- [alligatorio](https://alligator.io/js/intersection-observer/)\r\n\r\n- [googledev](https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/)\r\n\r\nPlease feel free to let me know if you find any mistakes or how I can improve this. Thank you so much for reading this far. Y’all are awesome!","user":{"name":"Igor Irianto","username":"iggredible","twitter_username":"iggredible","github_username":null,"website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7Y-wu5J6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--wBfKOn4t--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/161246/23134b39-2440-4a35-9ec3-50bc3f4848bc.jpg"}}}