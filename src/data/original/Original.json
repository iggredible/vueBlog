{
  "how-to-conditionally-render-convertkit-on-vuejs": {
    "attributes": {
      "title": "How to conditionally render convertkit on vuejs",
      "published_at": "2019-12-31T00:00:00.000Z",
      "description": "How to render Convertkit only on select pages in SPA"
    },
    "body": "I started using [convertkit](https://convertkit.com/) for mailing list. It is an awesome service for creators to help them grow mailing list. I recently encountered a problem where I need my form to be displayed on all my blogs page, but not on my About page. My blog (at the time of this writing) uses VueJS, but this problem may occur on any Single Page App (SPA). I will explain how I fixed it.\n\nTLDR:\n1. ConvertKit form is being displayed on all pages in SPA apps\n2. Use navigation guard to programatically embed forms only on matching routes\n3. Use navigation guard to remove embedded code on routes where we don't want to display the guard\n\n# The issue\n\nThere are several ways to embed Convertkit into a page:\n1. Javascript\n2. HTML\n3. Share\n4. Wordpress\n5. Unbounce\n\nThe method that I use is method 1, Javascript. Using the embed script, I pasted it into my `public/index.html`. The problem is, it shows up everywhere, on every single page.\n\nI need it to show up on specific pages, mainly \"Blogs\" and \"Blog\" pages. I definitely do not need it on About page\n\n# The cause\n\nWhen I pasted the ConvertKit code to public directory, it is being displayed everywhere. Being SPA, everything actually lives inside `<div id=\"app\"></div>`.\n\nSo the embedded CK form lives outside my app. First, we need to move the embed INSIDE Vue app.\n\nThe problem is, I can't just drop `<script src=\"...\">` inside my Vue component. Vue components don't know what to do with script tag.\n\n# The fix\n\nFor my solution, I decided to use Vue navigation [guards](https://router.vuejs.org/guide/advanced/navigation-guards.html).\n\nHere is the code that I use (my project originally started using vue-cli. main.js is where Vue instance is mounted to `#app`. You can do it wherever you add `VueRouter` into your app.)\n\n```\n...\n// main.js\nconst router = new VueRouter(routes);\n\nrouter.beforeEach((to, from, next) => {\n  const ckScript = document.querySelector(\"script[src*=convertkit]\");\n  const ckForm = document.querySelector(\"form\");\n  if ((ckForm || ckScript) && (to.name === \"Blog\" || to.name === \"Blogs\")) {\n    next();\n  }\n\n  if (ckForm) document.body.removeChild(ckForm);\n  if (ckScript) document.body.removeChild(ckScript);\n\n  if (to.name === \"Blog\" || to.name === \"Blogs\") {\n    let ckEmbed = document.createElement(\"script\");\n    ckEmbed.setAttribute(\n      \"src\",\n      \"https://your-CK-url\"\n    );\n    ckEmbed.setAttribute(\"data-uid\", \"12345ABC\"); // your ConvertKit data-uid\n    ckEmbed.async = true;\n    document.body.appendChild(ckEmbed);\n  }\n  next();\n});\n```\n\nLet me explain the code above.\n\nAfter playing around with ConvertKit, I realized that the original embedded script adds 2 HTML elements: a script with `src=\"...convertkit\"` and a `form`. My strategy is to intercept the URL requests. If they are going to either Blog or Blogs, I need to add the ConvertKit JS script.\n\nFirst I want to make sure that whenever we go to new page, we look for those elements (`src=...convertkit` and `form`) and delete them. Doing this will remove the form from being displayed.\n\nThis will find the two elements and delete them if they exist:\n\n```\n  const ckScript = document.querySelector(\"script[src*=convertkit]\");\n  const ckForm = document.querySelector(\"form\");\n  ...\n  if (ckForm) document.body.removeChild(ckForm);\n  if (ckScript) document.body.removeChild(ckScript);\n```\n\nIf we are headed to Blog or Blogs, I don't want them to be deleted. I want them to be displayed.\n\n```\n  if ((ckForm || ckScript) && (to.name === \"Blog\" || to.name === \"Blogs\")) {\n    next();\n  }\n```\n\nWe need to embed the script the way ConvertKit wants us to. I used `createElement` DOM methods to add a new script src, and sets its attributes to whatever convertKit tells.\n```\n  if (to.name === \"Blog\" || to.name === \"Blogs\") {\n    let ckEmbed = document.createElement(\"script\");\n    ckEmbed.setAttribute(\n      \"src\",\n      \"https://your-CK-url\"\n    );\n    ckEmbed.setAttribute(\"data-uid\", \"12345ABC\"); // your ConvertKit data-uid\n    ckEmbed.async = true;\n    document.body.appendChild(ckEmbed);\n  }\n```\n\nBtw, you may notice the extra logic below in the if statement. For optimization, I don't want to remove and add ConvertKit script each time we go between blogs. If we going to different Blogs, we should leave the forms alone, so I added a logic to check if `ckForm` or `ckScript` exist. If they do AND if we are headed to either Blog or Blogs, we don't need to remove/ add anything.\n\n```\n  if ((ckForm || ckScript) && (to.name === \"Blog\" || to.name === \"Blogs\")) {\n    next();\n  }\n```\n\nYou can find the documentations here:\n- [`createElement`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n- [`setAttribute`](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)\n- [`appendChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)\n\nAs an additional optimization, I also added\n```\n  if (process.env.NODE_ENV === \"production\") {\n    ...\n  }\n```\n\nSo when I am on development environment, I won't have the convetkit page. This saves me some time from loading the form when I don't need it locally.\n\n# Conclusion\n\nI am happy with the result. I assume this approach would work with other SPA apps like React. I believe [React router](https://github.com/ReactTraining/react-router) has something similar. This [SO post](https://stackoverflow.com/questions/42253277/react-router-v4-how-to-get-current-route) might help. I am not too sure about Angular, but I assume most SPA framework would have similar capability.\n\nThanks for reading! Let me know if you notice an error. Have a great 2020!\n",
    "frontmatter": "title: How to conditionally render convertkit on vuejs\npublished_at: 2019-12-31\ndescription: How to render Convertkit only on select pages in SPA"
  },
  "deciding-what-button-to-add-to-my-site": {
    "attributes": {
      "title": "Deciding What Button To Add To My Site",
      "published_at": "2019-12-28T00:00:00.000Z",
      "description": "How I come up with new navigation button on my site"
    },
    "body": "I recently updated the buttons on my blogs. Creating the buttons weren't hard, but the process of deciding where they go, what they should look like, and what they should do is. Here I am going to share my design process. I hope to impart to you guys my design process thinking\n\n# Deciding what kind of User Experience I want to provide\n\nIt is good to have a goal for my readers. I came up with two:\n\n1. To provide minimal distraction so user can focus on page content.\n2. To provide ease navigating around so user can focus on page content\n\nI want a subtle helper that does not take away from the content. *Its main thing is to keep its main thing the main thing: the content.*\n\n\n# Current Design\n\nThis is the current site\n![Current site - it only has bulb](https://firebasestorage.googleapis.com/v0/b/archer-import.appspot.com/o/blogs%2F2019%2F12%2F28%2Firiancurrent.png?alt=media&token=389ba3aa-f7ba-42a4-a878-468aefb3180b)\n\nWhat is it lacking? I can come up with infinite list, but two stood out: button to go to previous page and button to scroll to top.\n\nThere are other features that I'd like to add like: bookmarks, highlights, note-taking, etc. Those might come later, but for MVP, I decided that the easiest, most important features are the ability to go back and scroll up.\n\n# Inspiration\n\nI started by researching other sites I think have good design for design problem I am facing. Here are some:\n\n[Exo docs](https://hexdocs.pm/exo/Exo.html)\n![exo docs screenshot](https://firebasestorage.googleapis.com/v0/b/archer-import.appspot.com/o/blogs%2F2019%2F12%2F28%2Finspiration-exo.png?alt=media&token=f2180129-f313-4984-9b80-bc5d8e846cd0)\n\n[Vue docs](https://vuejs.org/v2/guide/)\n![vue docs screenshot](https://firebasestorage.googleapis.com/v0/b/archer-import.appspot.com/o/blogs%2F2019%2F12%2F28%2Finspiration-vue.png?alt=media&token=3578d33b-3bbd-493e-9748-685922d396ff)\n\n[patdryburgh](https://patdryburgh.com/)\n![pat blog screenshot](https://firebasestorage.googleapis.com/v0/b/archer-import.appspot.com/o/blogs%2F2019%2F12%2F28%2Finspiration-pat.png?alt=media&token=088e6717-5985-4c70-8d08-197522542aaf)\n\n[xomisse](https://xomisse.com/blog/add-a-scroll-back-to-top-button-to-blogger/)\n![xomisse blog](https://firebasestorage.googleapis.com/v0/b/archer-import.appspot.com/o/blogs%2F2019%2F12%2F28%2Finspiration-xomisse.png?alt=media&token=c9bb772a-8108-494d-b303-9922340c8dd3)\n\n\nSome things that stood out:\n- I really liked xomisse's scrollTop button. It is minimalistic and not distracting. The only thing that can be improved is positioning. At the moment it overlaps some of the texts\n- I liked the hexdocs' implementation of left and right sidebars. They are unintrusive and yet very useful.\n- I also liked Pat's top right navs (dark mode and search). But for the time being, I am not implementing them - so I will keep that as a reference for later.\n\n# Synthesizing Ideas\n\nFrom inspirations, I decided on three things: dark-mode, back arrow, and scrollTop arrow. I also decided to put them in the bottom so they won't interfere with most people's [F-shaped reading pattern](https://www.nngroup.com/articles/f-shaped-pattern-reading-web-content-discovered/).\n\nThis is what I came up with. Note the two buttons on bottom left:\n\n![result with two sidebar arrows](https://firebasestorage.googleapis.com/v0/b/archer-import.appspot.com/o/blogs%2F2019%2F12%2F28%2Fresult-twoarrows.png?alt=media&token=e8f0e138-9dfa-4224-a94d-d4b8fc771fa3)\n\nI will skip the coding part here because my intention is to share design process, not coding process. I use [vuejs](https://vuejs.org/) for my frontend needs and it has been super awesome.\n\n# Attempt 2\n\nAfter letting it sit for a day, I decided to take the left arrow out.\n\nWhy, you ask?\n\nBecause my main goal is simplicity. The less there is on the screen, the more user can focus on content.\n\n1. Browsers have back button already. Why should I add another button to do same thing all major browsers already do?\n2. Adding extra button adds slight cognitive load to user. More cognitive load = less cognitive capacity for users to focus on articles.\n3. Slashing out one of the buttons actually added an element of symmetry. Now we are left with one button on each sides. Symmetry is good.\n\n# Final design\n\nThis is the final design.\n\n![Final result](https://firebasestorage.googleapis.com/v0/b/archer-import.appspot.com/o/blogs%2F2019%2F12%2F28%2Ffinalresult.png?alt=media&token=4bc35057-c590-427d-80f5-7bdac367b3a3)\n\nI think it accomplish what I intended to do in the beginning: to help user consume content with least distraction.\n",
    "frontmatter": "title: Deciding What Button To Add To My Site\npublished_at: 2019-12-28\ndescription: How I come up with new navigation button on my site"
  }
}